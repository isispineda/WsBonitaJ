USE BONITA_BPM
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMT_Update')
BEGIN
    DROP TRIGGER dbo.TIPOMT_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMT_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.TIPOMT_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.TIPOMT_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMT_Delete')
BEGIN
    DROP TRIGGER dbo.TIPOMT_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMT_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.TIPOMT_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.TIPOMT_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMT_Insert')
BEGIN
    DROP TRIGGER dbo.TIPOMT_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMT_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.TIPOMT_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.TIPOMT_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMEDIOTRANSPORTE_Update')
BEGIN
    DROP TRIGGER dbo.TIPOMEDIOTRANSPORTE_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMEDIOTRANSPORTE_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.TIPOMEDIOTRANSPORTE_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.TIPOMEDIOTRANSPORTE_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMEDIOTRANSPORTE_Delete')
BEGIN
    DROP TRIGGER dbo.TIPOMEDIOTRANSPORTE_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMEDIOTRANSPORTE_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.TIPOMEDIOTRANSPORTE_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.TIPOMEDIOTRANSPORTE_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMEDIOTRANSPORTE_Insert')
BEGIN
    DROP TRIGGER dbo.TIPOMEDIOTRANSPORTE_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMEDIOTRANSPORTE_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.TIPOMEDIOTRANSPORTE_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.TIPOMEDIOTRANSPORTE_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCUMENTODGA_Update')
BEGIN
    DROP TRIGGER dbo.TIPODOCUMENTODGA_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCUMENTODGA_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.TIPODOCUMENTODGA_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.TIPODOCUMENTODGA_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCUMENTODGA_Delete')
BEGIN
    DROP TRIGGER dbo.TIPODOCUMENTODGA_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCUMENTODGA_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.TIPODOCUMENTODGA_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.TIPODOCUMENTODGA_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCUMENTODGA_Insert')
BEGIN
    DROP TRIGGER dbo.TIPODOCUMENTODGA_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCUMENTODGA_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.TIPODOCUMENTODGA_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.TIPODOCUMENTODGA_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCDGA_Update')
BEGIN
    DROP TRIGGER dbo.TIPODOCDGA_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCDGA_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.TIPODOCDGA_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.TIPODOCDGA_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCDGA_Delete')
BEGIN
    DROP TRIGGER dbo.TIPODOCDGA_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCDGA_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.TIPODOCDGA_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.TIPODOCDGA_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCDGA_Insert')
BEGIN
    DROP TRIGGER dbo.TIPODOCDGA_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCDGA_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.TIPODOCDGA_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.TIPODOCDGA_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTTRANSPORTMEDIAINFO_Update')
BEGIN
    DROP TRIGGER dbo.RESTTRANSPORTMEDIAINFO_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTTRANSPORTMEDIAINFO_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTTRANSPORTMEDIAINFO_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTTRANSPORTMEDIAINFO_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTTRANSPORTMEDIAINFO_Delete')
BEGIN
    DROP TRIGGER dbo.RESTTRANSPORTMEDIAINFO_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTTRANSPORTMEDIAINFO_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTTRANSPORTMEDIAINFO_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTTRANSPORTMEDIAINFO_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTTRANSPORTMEDIAINFO_Insert')
BEGIN
    DROP TRIGGER dbo.RESTTRANSPORTMEDIAINFO_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTTRANSPORTMEDIAINFO_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTTRANSPORTMEDIAINFO_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTTRANSPORTMEDIAINFO_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTSCGOUTPUT_Update')
BEGIN
    DROP TRIGGER dbo.RESTSCGOUTPUT_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTSCGOUTPUT_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTSCGOUTPUT_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTSCGOUTPUT_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTSCGOUTPUT_Delete')
BEGIN
    DROP TRIGGER dbo.RESTSCGOUTPUT_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTSCGOUTPUT_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTSCGOUTPUT_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTSCGOUTPUT_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTSCGOUTPUT_Insert')
BEGIN
    DROP TRIGGER dbo.RESTSCGOUTPUT_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTSCGOUTPUT_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTSCGOUTPUT_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTSCGOUTPUT_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTPROCESSEDDUCALIST_Update')
BEGIN
    DROP TRIGGER dbo.RESTPROCESSEDDUCALIST_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTPROCESSEDDUCALIST_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTPROCESSEDDUCALIST_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTPROCESSEDDUCALIST_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTPROCESSEDDUCALIST_Delete')
BEGIN
    DROP TRIGGER dbo.RESTPROCESSEDDUCALIST_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTPROCESSEDDUCALIST_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTPROCESSEDDUCALIST_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTPROCESSEDDUCALIST_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTPROCESSEDDUCALIST_Insert')
BEGIN
    DROP TRIGGER dbo.RESTPROCESSEDDUCALIST_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTPROCESSEDDUCALIST_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTPROCESSEDDUCALIST_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTPROCESSEDDUCALIST_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCASCONSULTAR_Update')
BEGIN
    DROP TRIGGER dbo.RESTDUCASCONSULTAR_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCASCONSULTAR_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTDUCASCONSULTAR_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTDUCASCONSULTAR_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCASCONSULTAR_Delete')
BEGIN
    DROP TRIGGER dbo.RESTDUCASCONSULTAR_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCASCONSULTAR_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTDUCASCONSULTAR_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTDUCASCONSULTAR_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCASCONSULTAR_Insert')
BEGIN
    DROP TRIGGER dbo.RESTDUCASCONSULTAR_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCASCONSULTAR_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTDUCASCONSULTAR_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTDUCASCONSULTAR_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCAOUPUTLIST_Update')
BEGIN
    DROP TRIGGER dbo.RESTDUCAOUPUTLIST_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCAOUPUTLIST_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTDUCAOUPUTLIST_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTDUCAOUPUTLIST_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCAOUPUTLIST_Delete')
BEGIN
    DROP TRIGGER dbo.RESTDUCAOUPUTLIST_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCAOUPUTLIST_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTDUCAOUPUTLIST_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTDUCAOUPUTLIST_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCAOUPUTLIST_Insert')
BEGIN
    DROP TRIGGER dbo.RESTDUCAOUPUTLIST_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCAOUPUTLIST_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTDUCAOUPUTLIST_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTDUCAOUPUTLIST_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDGME_Update')
BEGIN
    DROP TRIGGER dbo.RESTDGME_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDGME_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTDGME_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTDGME_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDGME_Delete')
BEGIN
    DROP TRIGGER dbo.RESTDGME_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDGME_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTDGME_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTDGME_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDGME_Insert')
BEGIN
    DROP TRIGGER dbo.RESTDGME_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDGME_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.RESTDGME_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.RESTDGME_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PUNTOCONTROL_Update')
BEGIN
    DROP TRIGGER dbo.PUNTOCONTROL_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='PUNTOCONTROL_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.PUNTOCONTROL_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.PUNTOCONTROL_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PUNTOCONTROL_Delete')
BEGIN
    DROP TRIGGER dbo.PUNTOCONTROL_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='PUNTOCONTROL_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.PUNTOCONTROL_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.PUNTOCONTROL_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PUNTOCONTROL_Insert')
BEGIN
    DROP TRIGGER dbo.PUNTOCONTROL_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='PUNTOCONTROL_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.PUNTOCONTROL_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.PUNTOCONTROL_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PROCESO_Update')
BEGIN
    DROP TRIGGER dbo.PROCESO_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='PROCESO_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.PROCESO_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.PROCESO_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PROCESO_Delete')
BEGIN
    DROP TRIGGER dbo.PROCESO_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='PROCESO_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.PROCESO_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.PROCESO_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PROCESO_Insert')
BEGIN
    DROP TRIGGER dbo.PROCESO_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='PROCESO_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.PROCESO_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.PROCESO_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PAIS_Update')
BEGIN
    DROP TRIGGER dbo.PAIS_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='PAIS_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.PAIS_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.PAIS_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PAIS_Delete')
BEGIN
    DROP TRIGGER dbo.PAIS_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='PAIS_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.PAIS_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.PAIS_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PAIS_Insert')
BEGIN
    DROP TRIGGER dbo.PAIS_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='PAIS_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.PAIS_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.PAIS_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='MENSAJE_Update')
BEGIN
    DROP TRIGGER dbo.MENSAJE_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='MENSAJE_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.MENSAJE_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.MENSAJE_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='MENSAJE_Delete')
BEGIN
    DROP TRIGGER dbo.MENSAJE_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='MENSAJE_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.MENSAJE_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.MENSAJE_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='MENSAJE_Insert')
BEGIN
    DROP TRIGGER dbo.MENSAJE_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='MENSAJE_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.MENSAJE_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.MENSAJE_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='LECTURAPUNTO_Update')
BEGIN
    DROP TRIGGER dbo.LECTURAPUNTO_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='LECTURAPUNTO_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.LECTURAPUNTO_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.LECTURAPUNTO_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='LECTURAPUNTO_Delete')
BEGIN
    DROP TRIGGER dbo.LECTURAPUNTO_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='LECTURAPUNTO_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.LECTURAPUNTO_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.LECTURAPUNTO_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='LECTURAPUNTO_Insert')
BEGIN
    DROP TRIGGER dbo.LECTURAPUNTO_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='LECTURAPUNTO_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.LECTURAPUNTO_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.LECTURAPUNTO_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='INSTITUCION_Update')
BEGIN
    DROP TRIGGER dbo.INSTITUCION_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='INSTITUCION_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.INSTITUCION_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.INSTITUCION_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='INSTITUCION_Delete')
BEGIN
    DROP TRIGGER dbo.INSTITUCION_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='INSTITUCION_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.INSTITUCION_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.INSTITUCION_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='INSTITUCION_Insert')
BEGIN
    DROP TRIGGER dbo.INSTITUCION_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='INSTITUCION_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.INSTITUCION_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.INSTITUCION_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='FRONTERA_Update')
BEGIN
    DROP TRIGGER dbo.FRONTERA_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='FRONTERA_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.FRONTERA_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.FRONTERA_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='FRONTERA_Delete')
BEGIN
    DROP TRIGGER dbo.FRONTERA_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='FRONTERA_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.FRONTERA_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.FRONTERA_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='FRONTERA_Insert')
BEGIN
    DROP TRIGGER dbo.FRONTERA_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='FRONTERA_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.FRONTERA_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.FRONTERA_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='FLUJO_Update')
BEGIN
    DROP TRIGGER dbo.FLUJO_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='FLUJO_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.FLUJO_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.FLUJO_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='FLUJO_Delete')
BEGIN
    DROP TRIGGER dbo.FLUJO_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='FLUJO_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.FLUJO_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.FLUJO_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='FLUJO_Insert')
BEGIN
    DROP TRIGGER dbo.FLUJO_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='FLUJO_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.FLUJO_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.FLUJO_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='DGADATOS_Update')
BEGIN
    DROP TRIGGER dbo.DGADATOS_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='DGADATOS_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.DGADATOS_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.DGADATOS_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='DGADATOS_Delete')
BEGIN
    DROP TRIGGER dbo.DGADATOS_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='DGADATOS_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.DGADATOS_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.DGADATOS_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='DGADATOS_Insert')
BEGIN
    DROP TRIGGER dbo.DGADATOS_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='DGADATOS_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.DGADATOS_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.DGADATOS_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='AREA_Update')
BEGIN
    DROP TRIGGER dbo.AREA_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='AREA_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.AREA_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.AREA_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='AREA_Delete')
BEGIN
    DROP TRIGGER dbo.AREA_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='AREA_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.AREA_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.AREA_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='AREA_Insert')
BEGIN
    DROP TRIGGER dbo.AREA_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='AREA_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.AREA_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.AREA_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='ALERTA_Update')
BEGIN
    DROP TRIGGER dbo.ALERTA_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='ALERTA_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.ALERTA_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.ALERTA_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='ALERTA_Delete')
BEGIN
    DROP TRIGGER dbo.ALERTA_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='ALERTA_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.ALERTA_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.ALERTA_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='ALERTA_Insert')
BEGIN
    DROP TRIGGER dbo.ALERTA_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='ALERTA_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.ALERTA_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.ALERTA_Insert >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='ACCION_Update')
BEGIN
    DROP TRIGGER dbo.ACCION_Update
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='ACCION_Update')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.ACCION_Update >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.ACCION_Update >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='ACCION_Delete')
BEGIN
    DROP TRIGGER dbo.ACCION_Delete
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='ACCION_Delete')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.ACCION_Delete >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.ACCION_Delete >>>'
END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='ACCION_Insert')
BEGIN
    DROP TRIGGER dbo.ACCION_Insert
    IF EXISTS (SELECT * FROM sys.triggers WHERE name='ACCION_Insert')
        PRINT '<<< FAILED DROPPING TRIGGER dbo.ACCION_Insert >>>'
    ELSE
        PRINT '<<< DROPPED TRIGGER dbo.ACCION_Insert >>>'
END
go
CREATE TRIGGER [dbo].[ACCION_Insert] 
ON [dbo].[ACCION]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[ACCION_Audit]
([persistenceId],[ACCION_OBSERVACION],[CORREO_ALERTA],[ENVIAR_ALERTA],[ESTADO_ACCION],[FECHA_ADICION],[FECHA_MODIFICACION],[FIN_FECHA],[ID_ACCION],[INICIO_FECHA],[ORIGEN_ACCION],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[USUARIO_ADICION],[USUARIO_FIN],[USUARIO_INICIO],[USUARIO_MODIFICACION],[USUARIO_RESPONSABLE],[persistenceVersion],[CODIGO_AREA_PID],[CODIGO_INSTITUCION_PID],[ID_FLUJO_PID],[CODIGO_AREA],[CODIGO_CASO],[CODIGO_FLUJO],[CODIGO_INSTITUCION],[TIEMPO_PROMEDIO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[ACCION_OBSERVACION],[CORREO_ALERTA],[ENVIAR_ALERTA],[ESTADO_ACCION],[FECHA_ADICION],[FECHA_MODIFICACION],[FIN_FECHA],[ID_ACCION],[INICIO_FECHA],[ORIGEN_ACCION],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[USUARIO_ADICION],[USUARIO_FIN],[USUARIO_INICIO],[USUARIO_MODIFICACION],[USUARIO_RESPONSABLE],[persistenceVersion],[CODIGO_AREA_PID],[CODIGO_INSTITUCION_PID],[ID_FLUJO_PID],[CODIGO_AREA],[CODIGO_CASO],[CODIGO_FLUJO],[CODIGO_INSTITUCION],[TIEMPO_PROMEDIO],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='ACCION_Insert')
    PRINT '<<< CREATED TRIGGER dbo.ACCION_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.ACCION_Insert >>>'
go
CREATE TRIGGER [dbo].[ACCION_Delete]    
ON [dbo].[ACCION]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[ACCION_Audit]
([persistenceId],[ACCION_OBSERVACION],[CORREO_ALERTA],[ENVIAR_ALERTA],[ESTADO_ACCION],[FECHA_ADICION],[FECHA_MODIFICACION],[FIN_FECHA],[ID_ACCION],[INICIO_FECHA],[ORIGEN_ACCION],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[USUARIO_ADICION],[USUARIO_FIN],[USUARIO_INICIO],[USUARIO_MODIFICACION],[USUARIO_RESPONSABLE],[persistenceVersion],[CODIGO_AREA_PID],[CODIGO_INSTITUCION_PID],[ID_FLUJO_PID],[CODIGO_AREA],[CODIGO_CASO],[CODIGO_FLUJO],[CODIGO_INSTITUCION],[TIEMPO_PROMEDIO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[ACCION_OBSERVACION],[CORREO_ALERTA],[ENVIAR_ALERTA],[ESTADO_ACCION],[FECHA_ADICION],[FECHA_MODIFICACION],[FIN_FECHA],[ID_ACCION],[INICIO_FECHA],[ORIGEN_ACCION],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[USUARIO_ADICION],[USUARIO_FIN],[USUARIO_INICIO],[USUARIO_MODIFICACION],[USUARIO_RESPONSABLE],[persistenceVersion],[CODIGO_AREA_PID],[CODIGO_INSTITUCION_PID],[ID_FLUJO_PID],[CODIGO_AREA],[CODIGO_CASO],[CODIGO_FLUJO],[CODIGO_INSTITUCION],[TIEMPO_PROMEDIO],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='ACCION_Delete')
    PRINT '<<< CREATED TRIGGER dbo.ACCION_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.ACCION_Delete >>>'
go
CREATE TRIGGER [dbo].[ACCION_Update]      
ON [dbo].[ACCION]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([ACCION_OBSERVACION]) THEN '[ACCION_OBSERVACION]-' ELSE '' END + 
CASE WHEN UPDATE([CORREO_ALERTA]) THEN '[CORREO_ALERTA]-' ELSE '' END + 
CASE WHEN UPDATE([ENVIAR_ALERTA]) THEN '[ENVIAR_ALERTA]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_ACCION]) THEN '[ESTADO_ACCION]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_ADICION]) THEN '[FECHA_ADICION]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_MODIFICACION]) THEN '[FECHA_MODIFICACION]-' ELSE '' END + 
CASE WHEN UPDATE([FIN_FECHA]) THEN '[FIN_FECHA]-' ELSE '' END + 
CASE WHEN UPDATE([ID_ACCION]) THEN '[ID_ACCION]-' ELSE '' END + 
CASE WHEN UPDATE([INICIO_FECHA]) THEN '[INICIO_FECHA]-' ELSE '' END + 
CASE WHEN UPDATE([ORIGEN_ACCION]) THEN '[ORIGEN_ACCION]-' ELSE '' END + 
CASE WHEN UPDATE([TIEMPO_MAXIMO]) THEN '[TIEMPO_MAXIMO]-' ELSE '' END + 
CASE WHEN UPDATE([TIEMPO_MINIMO]) THEN '[TIEMPO_MINIMO]-' ELSE '' END + 
CASE WHEN UPDATE([USUARIO_ADICION]) THEN '[USUARIO_ADICION]-' ELSE '' END + 
CASE WHEN UPDATE([USUARIO_FIN]) THEN '[USUARIO_FIN]-' ELSE '' END + 
CASE WHEN UPDATE([USUARIO_INICIO]) THEN '[USUARIO_INICIO]-' ELSE '' END + 
CASE WHEN UPDATE([USUARIO_MODIFICACION]) THEN '[USUARIO_MODIFICACION]-' ELSE '' END + 
CASE WHEN UPDATE([USUARIO_RESPONSABLE]) THEN '[USUARIO_RESPONSABLE]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_AREA_PID]) THEN '[CODIGO_AREA_PID]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_INSTITUCION_PID]) THEN '[CODIGO_INSTITUCION_PID]-' ELSE '' END + 
CASE WHEN UPDATE([ID_FLUJO_PID]) THEN '[ID_FLUJO_PID]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_AREA]) THEN '[CODIGO_AREA]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_CASO]) THEN '[CODIGO_CASO]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_FLUJO]) THEN '[CODIGO_FLUJO]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_INSTITUCION]) THEN '[CODIGO_INSTITUCION]-' ELSE '' END + 
CASE WHEN UPDATE([TIEMPO_PROMEDIO]) THEN '[TIEMPO_PROMEDIO]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[ACCION_Audit]
([persistenceId],[ACCION_OBSERVACION],[CORREO_ALERTA],[ENVIAR_ALERTA],[ESTADO_ACCION],[FECHA_ADICION],[FECHA_MODIFICACION],[FIN_FECHA],[ID_ACCION],[INICIO_FECHA],[ORIGEN_ACCION],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[USUARIO_ADICION],[USUARIO_FIN],[USUARIO_INICIO],[USUARIO_MODIFICACION],[USUARIO_RESPONSABLE],[persistenceVersion],[CODIGO_AREA_PID],[CODIGO_INSTITUCION_PID],[ID_FLUJO_PID],[CODIGO_AREA],[CODIGO_CASO],[CODIGO_FLUJO],[CODIGO_INSTITUCION],[TIEMPO_PROMEDIO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[ACCION_OBSERVACION],[CORREO_ALERTA],[ENVIAR_ALERTA],[ESTADO_ACCION],[FECHA_ADICION],[FECHA_MODIFICACION],[FIN_FECHA],[ID_ACCION],[INICIO_FECHA],[ORIGEN_ACCION],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[USUARIO_ADICION],[USUARIO_FIN],[USUARIO_INICIO],[USUARIO_MODIFICACION],[USUARIO_RESPONSABLE],[persistenceVersion],[CODIGO_AREA_PID],[CODIGO_INSTITUCION_PID],[ID_FLUJO_PID],[CODIGO_AREA],[CODIGO_CASO],[CODIGO_FLUJO],[CODIGO_INSTITUCION],[TIEMPO_PROMEDIO],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[ACCION_Audit]
([persistenceId],[ACCION_OBSERVACION],[CORREO_ALERTA],[ENVIAR_ALERTA],[ESTADO_ACCION],[FECHA_ADICION],[FECHA_MODIFICACION],[FIN_FECHA],[ID_ACCION],[INICIO_FECHA],[ORIGEN_ACCION],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[USUARIO_ADICION],[USUARIO_FIN],[USUARIO_INICIO],[USUARIO_MODIFICACION],[USUARIO_RESPONSABLE],[persistenceVersion],[CODIGO_AREA_PID],[CODIGO_INSTITUCION_PID],[ID_FLUJO_PID],[CODIGO_AREA],[CODIGO_CASO],[CODIGO_FLUJO],[CODIGO_INSTITUCION],[TIEMPO_PROMEDIO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[ACCION_OBSERVACION],[CORREO_ALERTA],[ENVIAR_ALERTA],[ESTADO_ACCION],[FECHA_ADICION],[FECHA_MODIFICACION],[FIN_FECHA],[ID_ACCION],[INICIO_FECHA],[ORIGEN_ACCION],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[USUARIO_ADICION],[USUARIO_FIN],[USUARIO_INICIO],[USUARIO_MODIFICACION],[USUARIO_RESPONSABLE],[persistenceVersion],[CODIGO_AREA_PID],[CODIGO_INSTITUCION_PID],[ID_FLUJO_PID],[CODIGO_AREA],[CODIGO_CASO],[CODIGO_FLUJO],[CODIGO_INSTITUCION],[TIEMPO_PROMEDIO],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='ACCION_Update')
    PRINT '<<< CREATED TRIGGER dbo.ACCION_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.ACCION_Update >>>'
go
CREATE TRIGGER [dbo].[ALERTA_Insert] 
ON [dbo].[ALERTA]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[ALERTA_Audit]
([persistenceId],[CORREO_ALERTA],[ESTADO_ALERTA],[FECHA_ALERTA],[ID_ACCION],[ID_ALERTA],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CORREO_ALERTA],[ESTADO_ALERTA],[FECHA_ALERTA],[ID_ACCION],[ID_ALERTA],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='ALERTA_Insert')
    PRINT '<<< CREATED TRIGGER dbo.ALERTA_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.ALERTA_Insert >>>'
go
CREATE TRIGGER [dbo].[ALERTA_Delete]    
ON [dbo].[ALERTA]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[ALERTA_Audit]
([persistenceId],[CORREO_ALERTA],[ESTADO_ALERTA],[FECHA_ALERTA],[ID_ACCION],[ID_ALERTA],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CORREO_ALERTA],[ESTADO_ALERTA],[FECHA_ALERTA],[ID_ACCION],[ID_ALERTA],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='ALERTA_Delete')
    PRINT '<<< CREATED TRIGGER dbo.ALERTA_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.ALERTA_Delete >>>'
go
CREATE TRIGGER [dbo].[ALERTA_Update]      
ON [dbo].[ALERTA]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([CORREO_ALERTA]) THEN '[CORREO_ALERTA]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_ALERTA]) THEN '[ESTADO_ALERTA]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_ALERTA]) THEN '[FECHA_ALERTA]-' ELSE '' END + 
CASE WHEN UPDATE([ID_ACCION]) THEN '[ID_ACCION]-' ELSE '' END + 
CASE WHEN UPDATE([ID_ALERTA]) THEN '[ID_ALERTA]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[ALERTA_Audit]
([persistenceId],[CORREO_ALERTA],[ESTADO_ALERTA],[FECHA_ALERTA],[ID_ACCION],[ID_ALERTA],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CORREO_ALERTA],[ESTADO_ALERTA],[FECHA_ALERTA],[ID_ACCION],[ID_ALERTA],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[ALERTA_Audit]
([persistenceId],[CORREO_ALERTA],[ESTADO_ALERTA],[FECHA_ALERTA],[ID_ACCION],[ID_ALERTA],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CORREO_ALERTA],[ESTADO_ALERTA],[FECHA_ALERTA],[ID_ACCION],[ID_ALERTA],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='ALERTA_Update')
    PRINT '<<< CREATED TRIGGER dbo.ALERTA_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.ALERTA_Update >>>'
go
CREATE TRIGGER [dbo].[AREA_Insert] 
ON [dbo].[AREA]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[AREA_Audit]
([persistenceId],[CODIGO_AREA],[ESTADO_REGISTRO],[NOMBRE_AREA],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],[TIEMPO_PROMEDIO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_AREA],[ESTADO_REGISTRO],[NOMBRE_AREA],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],[TIEMPO_PROMEDIO],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='AREA_Insert')
    PRINT '<<< CREATED TRIGGER dbo.AREA_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.AREA_Insert >>>'
go
CREATE TRIGGER [dbo].[AREA_Delete]    
ON [dbo].[AREA]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[AREA_Audit]
([persistenceId],[CODIGO_AREA],[ESTADO_REGISTRO],[NOMBRE_AREA],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],[TIEMPO_PROMEDIO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_AREA],[ESTADO_REGISTRO],[NOMBRE_AREA],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],[TIEMPO_PROMEDIO],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='AREA_Delete')
    PRINT '<<< CREATED TRIGGER dbo.AREA_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.AREA_Delete >>>'
go
CREATE TRIGGER [dbo].[AREA_Update]      
ON [dbo].[AREA]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_AREA]) THEN '[CODIGO_AREA]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_REGISTRO]) THEN '[ESTADO_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([NOMBRE_AREA]) THEN '[NOMBRE_AREA]-' ELSE '' END + 
CASE WHEN UPDATE([TIEMPO_MAXIMO]) THEN '[TIEMPO_MAXIMO]-' ELSE '' END + 
CASE WHEN UPDATE([TIEMPO_MINIMO]) THEN '[TIEMPO_MINIMO]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END + 
CASE WHEN UPDATE([TIEMPO_PROMEDIO]) THEN '[TIEMPO_PROMEDIO]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[AREA_Audit]
([persistenceId],[CODIGO_AREA],[ESTADO_REGISTRO],[NOMBRE_AREA],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],[TIEMPO_PROMEDIO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_AREA],[ESTADO_REGISTRO],[NOMBRE_AREA],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],[TIEMPO_PROMEDIO],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[AREA_Audit]
([persistenceId],[CODIGO_AREA],[ESTADO_REGISTRO],[NOMBRE_AREA],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],[TIEMPO_PROMEDIO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_AREA],[ESTADO_REGISTRO],[NOMBRE_AREA],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],[TIEMPO_PROMEDIO],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='AREA_Update')
    PRINT '<<< CREATED TRIGGER dbo.AREA_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.AREA_Update >>>'
go
CREATE TRIGGER [dbo].[DGADATOS_Insert] 
ON [dbo].[DGADATOS]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[DGADATOS_Audit]
([persistenceId],[CODIGO_DOCUMENTO],[ESTADO_INFORMACION],[FECHA_ADICION],[FECHA_MODIFICACION],[IDFLUJO],[ID_REGISTRO],[NUMERO_DOCUMENTO],[PAIS_DESTINO],[PAIS_ORIGEN],[SELECTIVIDAD],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_DOCUMENTO],[ESTADO_INFORMACION],[FECHA_ADICION],[FECHA_MODIFICACION],[IDFLUJO],[ID_REGISTRO],[NUMERO_DOCUMENTO],[PAIS_DESTINO],[PAIS_ORIGEN],[SELECTIVIDAD],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='DGADATOS_Insert')
    PRINT '<<< CREATED TRIGGER dbo.DGADATOS_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.DGADATOS_Insert >>>'
go
CREATE TRIGGER [dbo].[DGADATOS_Delete]    
ON [dbo].[DGADATOS]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[DGADATOS_Audit]
([persistenceId],[CODIGO_DOCUMENTO],[ESTADO_INFORMACION],[FECHA_ADICION],[FECHA_MODIFICACION],[IDFLUJO],[ID_REGISTRO],[NUMERO_DOCUMENTO],[PAIS_DESTINO],[PAIS_ORIGEN],[SELECTIVIDAD],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_DOCUMENTO],[ESTADO_INFORMACION],[FECHA_ADICION],[FECHA_MODIFICACION],[IDFLUJO],[ID_REGISTRO],[NUMERO_DOCUMENTO],[PAIS_DESTINO],[PAIS_ORIGEN],[SELECTIVIDAD],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='DGADATOS_Delete')
    PRINT '<<< CREATED TRIGGER dbo.DGADATOS_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.DGADATOS_Delete >>>'
go
CREATE TRIGGER [dbo].[DGADATOS_Update]      
ON [dbo].[DGADATOS]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_DOCUMENTO]) THEN '[CODIGO_DOCUMENTO]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_INFORMACION]) THEN '[ESTADO_INFORMACION]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_ADICION]) THEN '[FECHA_ADICION]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_MODIFICACION]) THEN '[FECHA_MODIFICACION]-' ELSE '' END + 
CASE WHEN UPDATE([IDFLUJO]) THEN '[IDFLUJO]-' ELSE '' END + 
CASE WHEN UPDATE([ID_REGISTRO]) THEN '[ID_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([NUMERO_DOCUMENTO]) THEN '[NUMERO_DOCUMENTO]-' ELSE '' END + 
CASE WHEN UPDATE([PAIS_DESTINO]) THEN '[PAIS_DESTINO]-' ELSE '' END + 
CASE WHEN UPDATE([PAIS_ORIGEN]) THEN '[PAIS_ORIGEN]-' ELSE '' END + 
CASE WHEN UPDATE([SELECTIVIDAD]) THEN '[SELECTIVIDAD]-' ELSE '' END + 
CASE WHEN UPDATE([USUARIO_ADICION]) THEN '[USUARIO_ADICION]-' ELSE '' END + 
CASE WHEN UPDATE([USUARIO_MODIFICACION]) THEN '[USUARIO_MODIFICACION]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_CASO]) THEN '[CODIGO_CASO]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_FLUJO]) THEN '[CODIGO_FLUJO]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[DGADATOS_Audit]
([persistenceId],[CODIGO_DOCUMENTO],[ESTADO_INFORMACION],[FECHA_ADICION],[FECHA_MODIFICACION],[IDFLUJO],[ID_REGISTRO],[NUMERO_DOCUMENTO],[PAIS_DESTINO],[PAIS_ORIGEN],[SELECTIVIDAD],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_DOCUMENTO],[ESTADO_INFORMACION],[FECHA_ADICION],[FECHA_MODIFICACION],[IDFLUJO],[ID_REGISTRO],[NUMERO_DOCUMENTO],[PAIS_DESTINO],[PAIS_ORIGEN],[SELECTIVIDAD],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[DGADATOS_Audit]
([persistenceId],[CODIGO_DOCUMENTO],[ESTADO_INFORMACION],[FECHA_ADICION],[FECHA_MODIFICACION],[IDFLUJO],[ID_REGISTRO],[NUMERO_DOCUMENTO],[PAIS_DESTINO],[PAIS_ORIGEN],[SELECTIVIDAD],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_DOCUMENTO],[ESTADO_INFORMACION],[FECHA_ADICION],[FECHA_MODIFICACION],[IDFLUJO],[ID_REGISTRO],[NUMERO_DOCUMENTO],[PAIS_DESTINO],[PAIS_ORIGEN],[SELECTIVIDAD],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='DGADATOS_Update')
    PRINT '<<< CREATED TRIGGER dbo.DGADATOS_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.DGADATOS_Update >>>'
go
CREATE TRIGGER [dbo].[FLUJO_Insert] 
ON [dbo].[FLUJO]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[FLUJO_Audit]
([persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_FRONTERA],[CODIGO_PROCESO],[CODIGO_TIPO_MT],[CONTENEDOR],[CORREO_AVISO],[ESTADO_FLUJO],[FECHA_ADICION],[FECHA_FIN],[FECHA_INICIO],[FECHA_MODIFICACION],[FECHA_NAC_MOTORISTA],[FECHA_VENC_DOC_MOTORISTA],[ID_ORIGEN_LECTURA],[MARCHAMO],[NOMBRES_MOTORISTA],[NO_DOC_MOTORISTA],[OBSERVACION_FLUJO],[PAIS_DOCUMENTO],[PARABRISAS],[PC_INGRESO],[PC_SALIDA],[PESO],[PLACA],[ROSTRO_MOTORISTA],[SALIDA_LISTA],[TELEFONO_AVISO],[TIPO_DOCUMENTO],[TIPO_FINALIZACION],[TIPO_FLUJO],[TRASERA],[T_MAXIMO],[T_MINIMO],[USUARIO_ADICION],[USUARIO_MODIFICACION],[VACIO],[persistenceVersion],[CODIGO_CASO],[CODIGO_LECTURA_PUNTO],[FECHA_ENTRADA_LISTA],[FECHA_SALIDA_LISTA],[RESPUESTA_DGA],[RESPUESTA_DGME],[RESPUESTA_MAG],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_FRONTERA],[CODIGO_PROCESO],[CODIGO_TIPO_MT],[CONTENEDOR],[CORREO_AVISO],[ESTADO_FLUJO],[FECHA_ADICION],[FECHA_FIN],[FECHA_INICIO],[FECHA_MODIFICACION],[FECHA_NAC_MOTORISTA],[FECHA_VENC_DOC_MOTORISTA],[ID_ORIGEN_LECTURA],[MARCHAMO],[NOMBRES_MOTORISTA],[NO_DOC_MOTORISTA],[OBSERVACION_FLUJO],[PAIS_DOCUMENTO],[PARABRISAS],[PC_INGRESO],[PC_SALIDA],[PESO],[PLACA],[ROSTRO_MOTORISTA],[SALIDA_LISTA],[TELEFONO_AVISO],[TIPO_DOCUMENTO],[TIPO_FINALIZACION],[TIPO_FLUJO],[TRASERA],[T_MAXIMO],[T_MINIMO],[USUARIO_ADICION],[USUARIO_MODIFICACION],[VACIO],[persistenceVersion],[CODIGO_CASO],[CODIGO_LECTURA_PUNTO],[FECHA_ENTRADA_LISTA],[FECHA_SALIDA_LISTA],[RESPUESTA_DGA],[RESPUESTA_DGME],[RESPUESTA_MAG],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='FLUJO_Insert')
    PRINT '<<< CREATED TRIGGER dbo.FLUJO_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.FLUJO_Insert >>>'
go
CREATE TRIGGER [dbo].[FLUJO_Delete]    
ON [dbo].[FLUJO]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[FLUJO_Audit]
([persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_FRONTERA],[CODIGO_PROCESO],[CODIGO_TIPO_MT],[CONTENEDOR],[CORREO_AVISO],[ESTADO_FLUJO],[FECHA_ADICION],[FECHA_FIN],[FECHA_INICIO],[FECHA_MODIFICACION],[FECHA_NAC_MOTORISTA],[FECHA_VENC_DOC_MOTORISTA],[ID_ORIGEN_LECTURA],[MARCHAMO],[NOMBRES_MOTORISTA],[NO_DOC_MOTORISTA],[OBSERVACION_FLUJO],[PAIS_DOCUMENTO],[PARABRISAS],[PC_INGRESO],[PC_SALIDA],[PESO],[PLACA],[ROSTRO_MOTORISTA],[SALIDA_LISTA],[TELEFONO_AVISO],[TIPO_DOCUMENTO],[TIPO_FINALIZACION],[TIPO_FLUJO],[TRASERA],[T_MAXIMO],[T_MINIMO],[USUARIO_ADICION],[USUARIO_MODIFICACION],[VACIO],[persistenceVersion],[CODIGO_CASO],[CODIGO_LECTURA_PUNTO],[FECHA_ENTRADA_LISTA],[FECHA_SALIDA_LISTA],[RESPUESTA_DGA],[RESPUESTA_DGME],[RESPUESTA_MAG],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_FRONTERA],[CODIGO_PROCESO],[CODIGO_TIPO_MT],[CONTENEDOR],[CORREO_AVISO],[ESTADO_FLUJO],[FECHA_ADICION],[FECHA_FIN],[FECHA_INICIO],[FECHA_MODIFICACION],[FECHA_NAC_MOTORISTA],[FECHA_VENC_DOC_MOTORISTA],[ID_ORIGEN_LECTURA],[MARCHAMO],[NOMBRES_MOTORISTA],[NO_DOC_MOTORISTA],[OBSERVACION_FLUJO],[PAIS_DOCUMENTO],[PARABRISAS],[PC_INGRESO],[PC_SALIDA],[PESO],[PLACA],[ROSTRO_MOTORISTA],[SALIDA_LISTA],[TELEFONO_AVISO],[TIPO_DOCUMENTO],[TIPO_FINALIZACION],[TIPO_FLUJO],[TRASERA],[T_MAXIMO],[T_MINIMO],[USUARIO_ADICION],[USUARIO_MODIFICACION],[VACIO],[persistenceVersion],[CODIGO_CASO],[CODIGO_LECTURA_PUNTO],[FECHA_ENTRADA_LISTA],[FECHA_SALIDA_LISTA],[RESPUESTA_DGA],[RESPUESTA_DGME],[RESPUESTA_MAG],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='FLUJO_Delete')
    PRINT '<<< CREATED TRIGGER dbo.FLUJO_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.FLUJO_Delete >>>'
go
CREATE TRIGGER [dbo].[FLUJO_Update]      
ON [dbo].[FLUJO]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([APELLIDOS_MOTORISTA]) THEN '[APELLIDOS_MOTORISTA]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_FRONTERA]) THEN '[CODIGO_FRONTERA]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_PROCESO]) THEN '[CODIGO_PROCESO]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_TIPO_MT]) THEN '[CODIGO_TIPO_MT]-' ELSE '' END + 
CASE WHEN UPDATE([CONTENEDOR]) THEN '[CONTENEDOR]-' ELSE '' END + 
CASE WHEN UPDATE([CORREO_AVISO]) THEN '[CORREO_AVISO]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_FLUJO]) THEN '[ESTADO_FLUJO]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_ADICION]) THEN '[FECHA_ADICION]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_FIN]) THEN '[FECHA_FIN]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_INICIO]) THEN '[FECHA_INICIO]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_MODIFICACION]) THEN '[FECHA_MODIFICACION]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_NAC_MOTORISTA]) THEN '[FECHA_NAC_MOTORISTA]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_VENC_DOC_MOTORISTA]) THEN '[FECHA_VENC_DOC_MOTORISTA]-' ELSE '' END + 
CASE WHEN UPDATE([ID_ORIGEN_LECTURA]) THEN '[ID_ORIGEN_LECTURA]-' ELSE '' END + 
CASE WHEN UPDATE([MARCHAMO]) THEN '[MARCHAMO]-' ELSE '' END + 
CASE WHEN UPDATE([NOMBRES_MOTORISTA]) THEN '[NOMBRES_MOTORISTA]-' ELSE '' END + 
CASE WHEN UPDATE([NO_DOC_MOTORISTA]) THEN '[NO_DOC_MOTORISTA]-' ELSE '' END + 
CASE WHEN UPDATE([OBSERVACION_FLUJO]) THEN '[OBSERVACION_FLUJO]-' ELSE '' END + 
CASE WHEN UPDATE([PAIS_DOCUMENTO]) THEN '[PAIS_DOCUMENTO]-' ELSE '' END + 
CASE WHEN UPDATE([PARABRISAS]) THEN '[PARABRISAS]-' ELSE '' END + 
CASE WHEN UPDATE([PC_INGRESO]) THEN '[PC_INGRESO]-' ELSE '' END + 
CASE WHEN UPDATE([PC_SALIDA]) THEN '[PC_SALIDA]-' ELSE '' END + 
CASE WHEN UPDATE([PESO]) THEN '[PESO]-' ELSE '' END + 
CASE WHEN UPDATE([PLACA]) THEN '[PLACA]-' ELSE '' END + 
CASE WHEN UPDATE([ROSTRO_MOTORISTA]) THEN '[ROSTRO_MOTORISTA]-' ELSE '' END + 
CASE WHEN UPDATE([SALIDA_LISTA]) THEN '[SALIDA_LISTA]-' ELSE '' END + 
CASE WHEN UPDATE([TELEFONO_AVISO]) THEN '[TELEFONO_AVISO]-' ELSE '' END + 
CASE WHEN UPDATE([TIPO_DOCUMENTO]) THEN '[TIPO_DOCUMENTO]-' ELSE '' END + 
CASE WHEN UPDATE([TIPO_FINALIZACION]) THEN '[TIPO_FINALIZACION]-' ELSE '' END + 
CASE WHEN UPDATE([TIPO_FLUJO]) THEN '[TIPO_FLUJO]-' ELSE '' END + 
CASE WHEN UPDATE([TRASERA]) THEN '[TRASERA]-' ELSE '' END + 
CASE WHEN UPDATE([T_MAXIMO]) THEN '[T_MAXIMO]-' ELSE '' END + 
CASE WHEN UPDATE([T_MINIMO]) THEN '[T_MINIMO]-' ELSE '' END + 
CASE WHEN UPDATE([USUARIO_ADICION]) THEN '[USUARIO_ADICION]-' ELSE '' END + 
CASE WHEN UPDATE([USUARIO_MODIFICACION]) THEN '[USUARIO_MODIFICACION]-' ELSE '' END + 
CASE WHEN UPDATE([VACIO]) THEN '[VACIO]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_CASO]) THEN '[CODIGO_CASO]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_LECTURA_PUNTO]) THEN '[CODIGO_LECTURA_PUNTO]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_ENTRADA_LISTA]) THEN '[FECHA_ENTRADA_LISTA]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_SALIDA_LISTA]) THEN '[FECHA_SALIDA_LISTA]-' ELSE '' END + 
CASE WHEN UPDATE([RESPUESTA_DGA]) THEN '[RESPUESTA_DGA]-' ELSE '' END + 
CASE WHEN UPDATE([RESPUESTA_DGME]) THEN '[RESPUESTA_DGME]-' ELSE '' END + 
CASE WHEN UPDATE([RESPUESTA_MAG]) THEN '[RESPUESTA_MAG]-' ELSE '' END + 
CASE WHEN UPDATE([TIEMPO_MAXIMO]) THEN '[TIEMPO_MAXIMO]-' ELSE '' END + 
CASE WHEN UPDATE([TIEMPO_MINIMO]) THEN '[TIEMPO_MINIMO]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[FLUJO_Audit]
([persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_FRONTERA],[CODIGO_PROCESO],[CODIGO_TIPO_MT],[CONTENEDOR],[CORREO_AVISO],[ESTADO_FLUJO],[FECHA_ADICION],[FECHA_FIN],[FECHA_INICIO],[FECHA_MODIFICACION],[FECHA_NAC_MOTORISTA],[FECHA_VENC_DOC_MOTORISTA],[ID_ORIGEN_LECTURA],[MARCHAMO],[NOMBRES_MOTORISTA],[NO_DOC_MOTORISTA],[OBSERVACION_FLUJO],[PAIS_DOCUMENTO],[PARABRISAS],[PC_INGRESO],[PC_SALIDA],[PESO],[PLACA],[ROSTRO_MOTORISTA],[SALIDA_LISTA],[TELEFONO_AVISO],[TIPO_DOCUMENTO],[TIPO_FINALIZACION],[TIPO_FLUJO],[TRASERA],[T_MAXIMO],[T_MINIMO],[USUARIO_ADICION],[USUARIO_MODIFICACION],[VACIO],[persistenceVersion],[CODIGO_CASO],[CODIGO_LECTURA_PUNTO],[FECHA_ENTRADA_LISTA],[FECHA_SALIDA_LISTA],[RESPUESTA_DGA],[RESPUESTA_DGME],[RESPUESTA_MAG],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_FRONTERA],[CODIGO_PROCESO],[CODIGO_TIPO_MT],[CONTENEDOR],[CORREO_AVISO],[ESTADO_FLUJO],[FECHA_ADICION],[FECHA_FIN],[FECHA_INICIO],[FECHA_MODIFICACION],[FECHA_NAC_MOTORISTA],[FECHA_VENC_DOC_MOTORISTA],[ID_ORIGEN_LECTURA],[MARCHAMO],[NOMBRES_MOTORISTA],[NO_DOC_MOTORISTA],[OBSERVACION_FLUJO],[PAIS_DOCUMENTO],[PARABRISAS],[PC_INGRESO],[PC_SALIDA],[PESO],[PLACA],[ROSTRO_MOTORISTA],[SALIDA_LISTA],[TELEFONO_AVISO],[TIPO_DOCUMENTO],[TIPO_FINALIZACION],[TIPO_FLUJO],[TRASERA],[T_MAXIMO],[T_MINIMO],[USUARIO_ADICION],[USUARIO_MODIFICACION],[VACIO],[persistenceVersion],[CODIGO_CASO],[CODIGO_LECTURA_PUNTO],[FECHA_ENTRADA_LISTA],[FECHA_SALIDA_LISTA],[RESPUESTA_DGA],[RESPUESTA_DGME],[RESPUESTA_MAG],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[FLUJO_Audit]
([persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_FRONTERA],[CODIGO_PROCESO],[CODIGO_TIPO_MT],[CONTENEDOR],[CORREO_AVISO],[ESTADO_FLUJO],[FECHA_ADICION],[FECHA_FIN],[FECHA_INICIO],[FECHA_MODIFICACION],[FECHA_NAC_MOTORISTA],[FECHA_VENC_DOC_MOTORISTA],[ID_ORIGEN_LECTURA],[MARCHAMO],[NOMBRES_MOTORISTA],[NO_DOC_MOTORISTA],[OBSERVACION_FLUJO],[PAIS_DOCUMENTO],[PARABRISAS],[PC_INGRESO],[PC_SALIDA],[PESO],[PLACA],[ROSTRO_MOTORISTA],[SALIDA_LISTA],[TELEFONO_AVISO],[TIPO_DOCUMENTO],[TIPO_FINALIZACION],[TIPO_FLUJO],[TRASERA],[T_MAXIMO],[T_MINIMO],[USUARIO_ADICION],[USUARIO_MODIFICACION],[VACIO],[persistenceVersion],[CODIGO_CASO],[CODIGO_LECTURA_PUNTO],[FECHA_ENTRADA_LISTA],[FECHA_SALIDA_LISTA],[RESPUESTA_DGA],[RESPUESTA_DGME],[RESPUESTA_MAG],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_FRONTERA],[CODIGO_PROCESO],[CODIGO_TIPO_MT],[CONTENEDOR],[CORREO_AVISO],[ESTADO_FLUJO],[FECHA_ADICION],[FECHA_FIN],[FECHA_INICIO],[FECHA_MODIFICACION],[FECHA_NAC_MOTORISTA],[FECHA_VENC_DOC_MOTORISTA],[ID_ORIGEN_LECTURA],[MARCHAMO],[NOMBRES_MOTORISTA],[NO_DOC_MOTORISTA],[OBSERVACION_FLUJO],[PAIS_DOCUMENTO],[PARABRISAS],[PC_INGRESO],[PC_SALIDA],[PESO],[PLACA],[ROSTRO_MOTORISTA],[SALIDA_LISTA],[TELEFONO_AVISO],[TIPO_DOCUMENTO],[TIPO_FINALIZACION],[TIPO_FLUJO],[TRASERA],[T_MAXIMO],[T_MINIMO],[USUARIO_ADICION],[USUARIO_MODIFICACION],[VACIO],[persistenceVersion],[CODIGO_CASO],[CODIGO_LECTURA_PUNTO],[FECHA_ENTRADA_LISTA],[FECHA_SALIDA_LISTA],[RESPUESTA_DGA],[RESPUESTA_DGME],[RESPUESTA_MAG],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='FLUJO_Update')
    PRINT '<<< CREATED TRIGGER dbo.FLUJO_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.FLUJO_Update >>>'
go
CREATE TRIGGER [dbo].[FRONTERA_Insert] 
ON [dbo].[FRONTERA]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[FRONTERA_Audit]
([persistenceId],[CODIGO_FRONTERA],[ESTADO_REGISTRO],[NOMBRE_FRONTERA],[TIPO_FRONTERA],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_FRONTERA],[ESTADO_REGISTRO],[NOMBRE_FRONTERA],[TIPO_FRONTERA],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='FRONTERA_Insert')
    PRINT '<<< CREATED TRIGGER dbo.FRONTERA_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.FRONTERA_Insert >>>'
go
CREATE TRIGGER [dbo].[FRONTERA_Delete]    
ON [dbo].[FRONTERA]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[FRONTERA_Audit]
([persistenceId],[CODIGO_FRONTERA],[ESTADO_REGISTRO],[NOMBRE_FRONTERA],[TIPO_FRONTERA],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_FRONTERA],[ESTADO_REGISTRO],[NOMBRE_FRONTERA],[TIPO_FRONTERA],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='FRONTERA_Delete')
    PRINT '<<< CREATED TRIGGER dbo.FRONTERA_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.FRONTERA_Delete >>>'
go
CREATE TRIGGER [dbo].[FRONTERA_Update]      
ON [dbo].[FRONTERA]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_FRONTERA]) THEN '[CODIGO_FRONTERA]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_REGISTRO]) THEN '[ESTADO_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([NOMBRE_FRONTERA]) THEN '[NOMBRE_FRONTERA]-' ELSE '' END + 
CASE WHEN UPDATE([TIPO_FRONTERA]) THEN '[TIPO_FRONTERA]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[FRONTERA_Audit]
([persistenceId],[CODIGO_FRONTERA],[ESTADO_REGISTRO],[NOMBRE_FRONTERA],[TIPO_FRONTERA],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_FRONTERA],[ESTADO_REGISTRO],[NOMBRE_FRONTERA],[TIPO_FRONTERA],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[FRONTERA_Audit]
([persistenceId],[CODIGO_FRONTERA],[ESTADO_REGISTRO],[NOMBRE_FRONTERA],[TIPO_FRONTERA],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_FRONTERA],[ESTADO_REGISTRO],[NOMBRE_FRONTERA],[TIPO_FRONTERA],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='FRONTERA_Update')
    PRINT '<<< CREATED TRIGGER dbo.FRONTERA_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.FRONTERA_Update >>>'
go
CREATE TRIGGER [dbo].[INSTITUCION_Insert] 
ON [dbo].[INSTITUCION]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[INSTITUCION_Audit]
([persistenceId],[CODIGO_INSTITUCION],[CORREO_ALERTA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_MODIFICACION],[NOMBRE_INSTITUCION],[SIGLAS_INSTITUCION],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_INSTITUCION],[CORREO_ALERTA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_MODIFICACION],[NOMBRE_INSTITUCION],[SIGLAS_INSTITUCION],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='INSTITUCION_Insert')
    PRINT '<<< CREATED TRIGGER dbo.INSTITUCION_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.INSTITUCION_Insert >>>'
go
CREATE TRIGGER [dbo].[INSTITUCION_Delete]    
ON [dbo].[INSTITUCION]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[INSTITUCION_Audit]
([persistenceId],[CODIGO_INSTITUCION],[CORREO_ALERTA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_MODIFICACION],[NOMBRE_INSTITUCION],[SIGLAS_INSTITUCION],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_INSTITUCION],[CORREO_ALERTA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_MODIFICACION],[NOMBRE_INSTITUCION],[SIGLAS_INSTITUCION],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='INSTITUCION_Delete')
    PRINT '<<< CREATED TRIGGER dbo.INSTITUCION_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.INSTITUCION_Delete >>>'
go
CREATE TRIGGER [dbo].[INSTITUCION_Update]      
ON [dbo].[INSTITUCION]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_INSTITUCION]) THEN '[CODIGO_INSTITUCION]-' ELSE '' END + 
CASE WHEN UPDATE([CORREO_ALERTA]) THEN '[CORREO_ALERTA]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_REGISTRO]) THEN '[ESTADO_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_ADICION]) THEN '[FECHA_ADICION]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_MODIFICACION]) THEN '[FECHA_MODIFICACION]-' ELSE '' END + 
CASE WHEN UPDATE([NOMBRE_INSTITUCION]) THEN '[NOMBRE_INSTITUCION]-' ELSE '' END + 
CASE WHEN UPDATE([SIGLAS_INSTITUCION]) THEN '[SIGLAS_INSTITUCION]-' ELSE '' END + 
CASE WHEN UPDATE([USUARIO_ADICION]) THEN '[USUARIO_ADICION]-' ELSE '' END + 
CASE WHEN UPDATE([USUARIO_MODIFICACION]) THEN '[USUARIO_MODIFICACION]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[INSTITUCION_Audit]
([persistenceId],[CODIGO_INSTITUCION],[CORREO_ALERTA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_MODIFICACION],[NOMBRE_INSTITUCION],[SIGLAS_INSTITUCION],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_INSTITUCION],[CORREO_ALERTA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_MODIFICACION],[NOMBRE_INSTITUCION],[SIGLAS_INSTITUCION],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[INSTITUCION_Audit]
([persistenceId],[CODIGO_INSTITUCION],[CORREO_ALERTA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_MODIFICACION],[NOMBRE_INSTITUCION],[SIGLAS_INSTITUCION],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_INSTITUCION],[CORREO_ALERTA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_MODIFICACION],[NOMBRE_INSTITUCION],[SIGLAS_INSTITUCION],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='INSTITUCION_Update')
    PRINT '<<< CREATED TRIGGER dbo.INSTITUCION_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.INSTITUCION_Update >>>'
go
CREATE TRIGGER [dbo].[LECTURAPUNTO_Insert] 
ON [dbo].[LECTURAPUNTO]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[LECTURAPUNTO_Audit]
([persistenceId],[ACCION_PLUMA],[CODIGO_MENSAJE],[CODIGO_PC],[CODIGO_TIPO_MT],[CONTENEDOR],[ESTADO_LECTURA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_INSTRUCCION],[FECHA_LECTURA],[FECHA_MODIFICACION],[ID_IMAGEN1],[ID_IMAGEN2],[ID_IMAGEN3],[ID_IMAGEN4],[ID_ORIGEN_LA],[ID_VIDEO],[MARCHAMO],[NO_PLUMA],[PARABRISAS],[PC_CONTENEDOR],[PC_MARCHAMO],[PC_PARABRISAS],[PC_PESO],[PC_PLACA],[PC_ROSTRO],[PC_TRASERA],[PESO],[PLACA],[ROSTRO],[TIPO_LECTURA],[TRASERA],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[ACCION_PLUMA],[CODIGO_MENSAJE],[CODIGO_PC],[CODIGO_TIPO_MT],[CONTENEDOR],[ESTADO_LECTURA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_INSTRUCCION],[FECHA_LECTURA],[FECHA_MODIFICACION],[ID_IMAGEN1],[ID_IMAGEN2],[ID_IMAGEN3],[ID_IMAGEN4],[ID_ORIGEN_LA],[ID_VIDEO],[MARCHAMO],[NO_PLUMA],[PARABRISAS],[PC_CONTENEDOR],[PC_MARCHAMO],[PC_PARABRISAS],[PC_PESO],[PC_PLACA],[PC_ROSTRO],[PC_TRASERA],[PESO],[PLACA],[ROSTRO],[TIPO_LECTURA],[TRASERA],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='LECTURAPUNTO_Insert')
    PRINT '<<< CREATED TRIGGER dbo.LECTURAPUNTO_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.LECTURAPUNTO_Insert >>>'
go
CREATE TRIGGER [dbo].[LECTURAPUNTO_Delete]    
ON [dbo].[LECTURAPUNTO]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[LECTURAPUNTO_Audit]
([persistenceId],[ACCION_PLUMA],[CODIGO_MENSAJE],[CODIGO_PC],[CODIGO_TIPO_MT],[CONTENEDOR],[ESTADO_LECTURA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_INSTRUCCION],[FECHA_LECTURA],[FECHA_MODIFICACION],[ID_IMAGEN1],[ID_IMAGEN2],[ID_IMAGEN3],[ID_IMAGEN4],[ID_ORIGEN_LA],[ID_VIDEO],[MARCHAMO],[NO_PLUMA],[PARABRISAS],[PC_CONTENEDOR],[PC_MARCHAMO],[PC_PARABRISAS],[PC_PESO],[PC_PLACA],[PC_ROSTRO],[PC_TRASERA],[PESO],[PLACA],[ROSTRO],[TIPO_LECTURA],[TRASERA],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[ACCION_PLUMA],[CODIGO_MENSAJE],[CODIGO_PC],[CODIGO_TIPO_MT],[CONTENEDOR],[ESTADO_LECTURA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_INSTRUCCION],[FECHA_LECTURA],[FECHA_MODIFICACION],[ID_IMAGEN1],[ID_IMAGEN2],[ID_IMAGEN3],[ID_IMAGEN4],[ID_ORIGEN_LA],[ID_VIDEO],[MARCHAMO],[NO_PLUMA],[PARABRISAS],[PC_CONTENEDOR],[PC_MARCHAMO],[PC_PARABRISAS],[PC_PESO],[PC_PLACA],[PC_ROSTRO],[PC_TRASERA],[PESO],[PLACA],[ROSTRO],[TIPO_LECTURA],[TRASERA],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='LECTURAPUNTO_Delete')
    PRINT '<<< CREATED TRIGGER dbo.LECTURAPUNTO_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.LECTURAPUNTO_Delete >>>'
go
CREATE TRIGGER [dbo].[LECTURAPUNTO_Update]      
ON [dbo].[LECTURAPUNTO]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([ACCION_PLUMA]) THEN '[ACCION_PLUMA]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_MENSAJE]) THEN '[CODIGO_MENSAJE]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_PC]) THEN '[CODIGO_PC]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_TIPO_MT]) THEN '[CODIGO_TIPO_MT]-' ELSE '' END + 
CASE WHEN UPDATE([CONTENEDOR]) THEN '[CONTENEDOR]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_LECTURA]) THEN '[ESTADO_LECTURA]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_REGISTRO]) THEN '[ESTADO_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_ADICION]) THEN '[FECHA_ADICION]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_INSTRUCCION]) THEN '[FECHA_INSTRUCCION]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_LECTURA]) THEN '[FECHA_LECTURA]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_MODIFICACION]) THEN '[FECHA_MODIFICACION]-' ELSE '' END + 
CASE WHEN UPDATE([ID_IMAGEN1]) THEN '[ID_IMAGEN1]-' ELSE '' END + 
CASE WHEN UPDATE([ID_IMAGEN2]) THEN '[ID_IMAGEN2]-' ELSE '' END + 
CASE WHEN UPDATE([ID_IMAGEN3]) THEN '[ID_IMAGEN3]-' ELSE '' END + 
CASE WHEN UPDATE([ID_IMAGEN4]) THEN '[ID_IMAGEN4]-' ELSE '' END + 
CASE WHEN UPDATE([ID_ORIGEN_LA]) THEN '[ID_ORIGEN_LA]-' ELSE '' END + 
CASE WHEN UPDATE([ID_VIDEO]) THEN '[ID_VIDEO]-' ELSE '' END + 
CASE WHEN UPDATE([MARCHAMO]) THEN '[MARCHAMO]-' ELSE '' END + 
CASE WHEN UPDATE([NO_PLUMA]) THEN '[NO_PLUMA]-' ELSE '' END + 
CASE WHEN UPDATE([PARABRISAS]) THEN '[PARABRISAS]-' ELSE '' END + 
CASE WHEN UPDATE([PC_CONTENEDOR]) THEN '[PC_CONTENEDOR]-' ELSE '' END + 
CASE WHEN UPDATE([PC_MARCHAMO]) THEN '[PC_MARCHAMO]-' ELSE '' END + 
CASE WHEN UPDATE([PC_PARABRISAS]) THEN '[PC_PARABRISAS]-' ELSE '' END + 
CASE WHEN UPDATE([PC_PESO]) THEN '[PC_PESO]-' ELSE '' END + 
CASE WHEN UPDATE([PC_PLACA]) THEN '[PC_PLACA]-' ELSE '' END + 
CASE WHEN UPDATE([PC_ROSTRO]) THEN '[PC_ROSTRO]-' ELSE '' END + 
CASE WHEN UPDATE([PC_TRASERA]) THEN '[PC_TRASERA]-' ELSE '' END + 
CASE WHEN UPDATE([PESO]) THEN '[PESO]-' ELSE '' END + 
CASE WHEN UPDATE([PLACA]) THEN '[PLACA]-' ELSE '' END + 
CASE WHEN UPDATE([ROSTRO]) THEN '[ROSTRO]-' ELSE '' END + 
CASE WHEN UPDATE([TIPO_LECTURA]) THEN '[TIPO_LECTURA]-' ELSE '' END + 
CASE WHEN UPDATE([TRASERA]) THEN '[TRASERA]-' ELSE '' END + 
CASE WHEN UPDATE([USUARIO_ADICION]) THEN '[USUARIO_ADICION]-' ELSE '' END + 
CASE WHEN UPDATE([USUARIO_MODIFICACION]) THEN '[USUARIO_MODIFICACION]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_CASO]) THEN '[CODIGO_CASO]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_FLUJO]) THEN '[CODIGO_FLUJO]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[LECTURAPUNTO_Audit]
([persistenceId],[ACCION_PLUMA],[CODIGO_MENSAJE],[CODIGO_PC],[CODIGO_TIPO_MT],[CONTENEDOR],[ESTADO_LECTURA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_INSTRUCCION],[FECHA_LECTURA],[FECHA_MODIFICACION],[ID_IMAGEN1],[ID_IMAGEN2],[ID_IMAGEN3],[ID_IMAGEN4],[ID_ORIGEN_LA],[ID_VIDEO],[MARCHAMO],[NO_PLUMA],[PARABRISAS],[PC_CONTENEDOR],[PC_MARCHAMO],[PC_PARABRISAS],[PC_PESO],[PC_PLACA],[PC_ROSTRO],[PC_TRASERA],[PESO],[PLACA],[ROSTRO],[TIPO_LECTURA],[TRASERA],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[ACCION_PLUMA],[CODIGO_MENSAJE],[CODIGO_PC],[CODIGO_TIPO_MT],[CONTENEDOR],[ESTADO_LECTURA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_INSTRUCCION],[FECHA_LECTURA],[FECHA_MODIFICACION],[ID_IMAGEN1],[ID_IMAGEN2],[ID_IMAGEN3],[ID_IMAGEN4],[ID_ORIGEN_LA],[ID_VIDEO],[MARCHAMO],[NO_PLUMA],[PARABRISAS],[PC_CONTENEDOR],[PC_MARCHAMO],[PC_PARABRISAS],[PC_PESO],[PC_PLACA],[PC_ROSTRO],[PC_TRASERA],[PESO],[PLACA],[ROSTRO],[TIPO_LECTURA],[TRASERA],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[LECTURAPUNTO_Audit]
([persistenceId],[ACCION_PLUMA],[CODIGO_MENSAJE],[CODIGO_PC],[CODIGO_TIPO_MT],[CONTENEDOR],[ESTADO_LECTURA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_INSTRUCCION],[FECHA_LECTURA],[FECHA_MODIFICACION],[ID_IMAGEN1],[ID_IMAGEN2],[ID_IMAGEN3],[ID_IMAGEN4],[ID_ORIGEN_LA],[ID_VIDEO],[MARCHAMO],[NO_PLUMA],[PARABRISAS],[PC_CONTENEDOR],[PC_MARCHAMO],[PC_PARABRISAS],[PC_PESO],[PC_PLACA],[PC_ROSTRO],[PC_TRASERA],[PESO],[PLACA],[ROSTRO],[TIPO_LECTURA],[TRASERA],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[ACCION_PLUMA],[CODIGO_MENSAJE],[CODIGO_PC],[CODIGO_TIPO_MT],[CONTENEDOR],[ESTADO_LECTURA],[ESTADO_REGISTRO],[FECHA_ADICION],[FECHA_INSTRUCCION],[FECHA_LECTURA],[FECHA_MODIFICACION],[ID_IMAGEN1],[ID_IMAGEN2],[ID_IMAGEN3],[ID_IMAGEN4],[ID_ORIGEN_LA],[ID_VIDEO],[MARCHAMO],[NO_PLUMA],[PARABRISAS],[PC_CONTENEDOR],[PC_MARCHAMO],[PC_PARABRISAS],[PC_PESO],[PC_PLACA],[PC_ROSTRO],[PC_TRASERA],[PESO],[PLACA],[ROSTRO],[TIPO_LECTURA],[TRASERA],[USUARIO_ADICION],[USUARIO_MODIFICACION],[persistenceVersion],[CODIGO_CASO],[CODIGO_FLUJO],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='LECTURAPUNTO_Update')
    PRINT '<<< CREATED TRIGGER dbo.LECTURAPUNTO_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.LECTURAPUNTO_Update >>>'
go
CREATE TRIGGER [dbo].[MENSAJE_Insert] 
ON [dbo].[MENSAJE]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[MENSAJE_Audit]
([persistenceId],[CODIGO_MENSAJE],[DESCRIPCION_MENSAJE],[ESTADO_REGISTRO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_MENSAJE],[DESCRIPCION_MENSAJE],[ESTADO_REGISTRO],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='MENSAJE_Insert')
    PRINT '<<< CREATED TRIGGER dbo.MENSAJE_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.MENSAJE_Insert >>>'
go
CREATE TRIGGER [dbo].[MENSAJE_Delete]    
ON [dbo].[MENSAJE]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[MENSAJE_Audit]
([persistenceId],[CODIGO_MENSAJE],[DESCRIPCION_MENSAJE],[ESTADO_REGISTRO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_MENSAJE],[DESCRIPCION_MENSAJE],[ESTADO_REGISTRO],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='MENSAJE_Delete')
    PRINT '<<< CREATED TRIGGER dbo.MENSAJE_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.MENSAJE_Delete >>>'
go
CREATE TRIGGER [dbo].[MENSAJE_Update]      
ON [dbo].[MENSAJE]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_MENSAJE]) THEN '[CODIGO_MENSAJE]-' ELSE '' END + 
CASE WHEN UPDATE([DESCRIPCION_MENSAJE]) THEN '[DESCRIPCION_MENSAJE]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_REGISTRO]) THEN '[ESTADO_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[MENSAJE_Audit]
([persistenceId],[CODIGO_MENSAJE],[DESCRIPCION_MENSAJE],[ESTADO_REGISTRO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_MENSAJE],[DESCRIPCION_MENSAJE],[ESTADO_REGISTRO],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[MENSAJE_Audit]
([persistenceId],[CODIGO_MENSAJE],[DESCRIPCION_MENSAJE],[ESTADO_REGISTRO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_MENSAJE],[DESCRIPCION_MENSAJE],[ESTADO_REGISTRO],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='MENSAJE_Update')
    PRINT '<<< CREATED TRIGGER dbo.MENSAJE_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.MENSAJE_Update >>>'
go
CREATE TRIGGER [dbo].[PAIS_Insert] 
ON [dbo].[PAIS]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[PAIS_Audit]
([persistenceId],[CODIGO_PAIS],[ESTADO_REGISTRO],[NOMBRE_PAIS],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_PAIS],[ESTADO_REGISTRO],[NOMBRE_PAIS],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PAIS_Insert')
    PRINT '<<< CREATED TRIGGER dbo.PAIS_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.PAIS_Insert >>>'
go
CREATE TRIGGER [dbo].[PAIS_Delete]    
ON [dbo].[PAIS]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[PAIS_Audit]
([persistenceId],[CODIGO_PAIS],[ESTADO_REGISTRO],[NOMBRE_PAIS],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_PAIS],[ESTADO_REGISTRO],[NOMBRE_PAIS],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PAIS_Delete')
    PRINT '<<< CREATED TRIGGER dbo.PAIS_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.PAIS_Delete >>>'
go
CREATE TRIGGER [dbo].[PAIS_Update]      
ON [dbo].[PAIS]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_PAIS]) THEN '[CODIGO_PAIS]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_REGISTRO]) THEN '[ESTADO_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([NOMBRE_PAIS]) THEN '[NOMBRE_PAIS]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[PAIS_Audit]
([persistenceId],[CODIGO_PAIS],[ESTADO_REGISTRO],[NOMBRE_PAIS],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_PAIS],[ESTADO_REGISTRO],[NOMBRE_PAIS],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[PAIS_Audit]
([persistenceId],[CODIGO_PAIS],[ESTADO_REGISTRO],[NOMBRE_PAIS],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_PAIS],[ESTADO_REGISTRO],[NOMBRE_PAIS],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PAIS_Update')
    PRINT '<<< CREATED TRIGGER dbo.PAIS_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.PAIS_Update >>>'
go
CREATE TRIGGER [dbo].[PROCESO_Insert] 
ON [dbo].[PROCESO]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[PROCESO_Audit]
([persistenceId],[CODIGO_PROCESO],[ESTADO_REGISTRO],[NOMBRE_PROCESO],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_PROCESO],[ESTADO_REGISTRO],[NOMBRE_PROCESO],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PROCESO_Insert')
    PRINT '<<< CREATED TRIGGER dbo.PROCESO_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.PROCESO_Insert >>>'
go
CREATE TRIGGER [dbo].[PROCESO_Delete]    
ON [dbo].[PROCESO]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[PROCESO_Audit]
([persistenceId],[CODIGO_PROCESO],[ESTADO_REGISTRO],[NOMBRE_PROCESO],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_PROCESO],[ESTADO_REGISTRO],[NOMBRE_PROCESO],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PROCESO_Delete')
    PRINT '<<< CREATED TRIGGER dbo.PROCESO_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.PROCESO_Delete >>>'
go
CREATE TRIGGER [dbo].[PROCESO_Update]      
ON [dbo].[PROCESO]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_PROCESO]) THEN '[CODIGO_PROCESO]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_REGISTRO]) THEN '[ESTADO_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([NOMBRE_PROCESO]) THEN '[NOMBRE_PROCESO]-' ELSE '' END + 
CASE WHEN UPDATE([TIEMPO_MAXIMO]) THEN '[TIEMPO_MAXIMO]-' ELSE '' END + 
CASE WHEN UPDATE([TIEMPO_MINIMO]) THEN '[TIEMPO_MINIMO]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[PROCESO_Audit]
([persistenceId],[CODIGO_PROCESO],[ESTADO_REGISTRO],[NOMBRE_PROCESO],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_PROCESO],[ESTADO_REGISTRO],[NOMBRE_PROCESO],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[PROCESO_Audit]
([persistenceId],[CODIGO_PROCESO],[ESTADO_REGISTRO],[NOMBRE_PROCESO],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_PROCESO],[ESTADO_REGISTRO],[NOMBRE_PROCESO],[TIEMPO_MAXIMO],[TIEMPO_MINIMO],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PROCESO_Update')
    PRINT '<<< CREATED TRIGGER dbo.PROCESO_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.PROCESO_Update >>>'
go
CREATE TRIGGER [dbo].[PUNTOCONTROL_Insert] 
ON [dbo].[PUNTOCONTROL]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[PUNTOCONTROL_Audit]
([persistenceId],[CODIGO_PC],[ESTADO_REGISTRO],[OCUPADO],[TIPO_PC],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_PC],[ESTADO_REGISTRO],[OCUPADO],[TIPO_PC],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PUNTOCONTROL_Insert')
    PRINT '<<< CREATED TRIGGER dbo.PUNTOCONTROL_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.PUNTOCONTROL_Insert >>>'
go
CREATE TRIGGER [dbo].[PUNTOCONTROL_Delete]    
ON [dbo].[PUNTOCONTROL]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[PUNTOCONTROL_Audit]
([persistenceId],[CODIGO_PC],[ESTADO_REGISTRO],[OCUPADO],[TIPO_PC],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_PC],[ESTADO_REGISTRO],[OCUPADO],[TIPO_PC],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PUNTOCONTROL_Delete')
    PRINT '<<< CREATED TRIGGER dbo.PUNTOCONTROL_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.PUNTOCONTROL_Delete >>>'
go
CREATE TRIGGER [dbo].[PUNTOCONTROL_Update]      
ON [dbo].[PUNTOCONTROL]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_PC]) THEN '[CODIGO_PC]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_REGISTRO]) THEN '[ESTADO_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([OCUPADO]) THEN '[OCUPADO]-' ELSE '' END + 
CASE WHEN UPDATE([TIPO_PC]) THEN '[TIPO_PC]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[PUNTOCONTROL_Audit]
([persistenceId],[CODIGO_PC],[ESTADO_REGISTRO],[OCUPADO],[TIPO_PC],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_PC],[ESTADO_REGISTRO],[OCUPADO],[TIPO_PC],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[PUNTOCONTROL_Audit]
([persistenceId],[CODIGO_PC],[ESTADO_REGISTRO],[OCUPADO],[TIPO_PC],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_PC],[ESTADO_REGISTRO],[OCUPADO],[TIPO_PC],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='PUNTOCONTROL_Update')
    PRINT '<<< CREATED TRIGGER dbo.PUNTOCONTROL_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.PUNTOCONTROL_Update >>>'
go
CREATE TRIGGER [dbo].[RESTDGME_Insert] 
ON [dbo].[RESTDGME]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[RESTDGME_Audit]
([persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_CASO],[CODIGO_FLUJO],[DOCUMENTO_UNICO],[FECHA_NAC_MOTORISTA],[FECHA_REGISTRO],[FECHA_VENC_DOC_MOTORISTA],[NOMBRES_MOTORISTA],[PAIS_DOCUMENTO],[SELECTIVIDAD],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_CASO],[CODIGO_FLUJO],[DOCUMENTO_UNICO],[FECHA_NAC_MOTORISTA],[FECHA_REGISTRO],[FECHA_VENC_DOC_MOTORISTA],[NOMBRES_MOTORISTA],[PAIS_DOCUMENTO],[SELECTIVIDAD],[TRA_PLA_NBR],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDGME_Insert')
    PRINT '<<< CREATED TRIGGER dbo.RESTDGME_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTDGME_Insert >>>'
go
CREATE TRIGGER [dbo].[RESTDGME_Delete]    
ON [dbo].[RESTDGME]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[RESTDGME_Audit]
([persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_CASO],[CODIGO_FLUJO],[DOCUMENTO_UNICO],[FECHA_NAC_MOTORISTA],[FECHA_REGISTRO],[FECHA_VENC_DOC_MOTORISTA],[NOMBRES_MOTORISTA],[PAIS_DOCUMENTO],[SELECTIVIDAD],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_CASO],[CODIGO_FLUJO],[DOCUMENTO_UNICO],[FECHA_NAC_MOTORISTA],[FECHA_REGISTRO],[FECHA_VENC_DOC_MOTORISTA],[NOMBRES_MOTORISTA],[PAIS_DOCUMENTO],[SELECTIVIDAD],[TRA_PLA_NBR],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDGME_Delete')
    PRINT '<<< CREATED TRIGGER dbo.RESTDGME_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTDGME_Delete >>>'
go
CREATE TRIGGER [dbo].[RESTDGME_Update]      
ON [dbo].[RESTDGME]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([APELLIDOS_MOTORISTA]) THEN '[APELLIDOS_MOTORISTA]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_CASO]) THEN '[CODIGO_CASO]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_FLUJO]) THEN '[CODIGO_FLUJO]-' ELSE '' END + 
CASE WHEN UPDATE([DOCUMENTO_UNICO]) THEN '[DOCUMENTO_UNICO]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_NAC_MOTORISTA]) THEN '[FECHA_NAC_MOTORISTA]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_REGISTRO]) THEN '[FECHA_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_VENC_DOC_MOTORISTA]) THEN '[FECHA_VENC_DOC_MOTORISTA]-' ELSE '' END + 
CASE WHEN UPDATE([NOMBRES_MOTORISTA]) THEN '[NOMBRES_MOTORISTA]-' ELSE '' END + 
CASE WHEN UPDATE([PAIS_DOCUMENTO]) THEN '[PAIS_DOCUMENTO]-' ELSE '' END + 
CASE WHEN UPDATE([SELECTIVIDAD]) THEN '[SELECTIVIDAD]-' ELSE '' END + 
CASE WHEN UPDATE([TRA_PLA_NBR]) THEN '[TRA_PLA_NBR]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[RESTDGME_Audit]
([persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_CASO],[CODIGO_FLUJO],[DOCUMENTO_UNICO],[FECHA_NAC_MOTORISTA],[FECHA_REGISTRO],[FECHA_VENC_DOC_MOTORISTA],[NOMBRES_MOTORISTA],[PAIS_DOCUMENTO],[SELECTIVIDAD],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_CASO],[CODIGO_FLUJO],[DOCUMENTO_UNICO],[FECHA_NAC_MOTORISTA],[FECHA_REGISTRO],[FECHA_VENC_DOC_MOTORISTA],[NOMBRES_MOTORISTA],[PAIS_DOCUMENTO],[SELECTIVIDAD],[TRA_PLA_NBR],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[RESTDGME_Audit]
([persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_CASO],[CODIGO_FLUJO],[DOCUMENTO_UNICO],[FECHA_NAC_MOTORISTA],[FECHA_REGISTRO],[FECHA_VENC_DOC_MOTORISTA],[NOMBRES_MOTORISTA],[PAIS_DOCUMENTO],[SELECTIVIDAD],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[APELLIDOS_MOTORISTA],[CODIGO_CASO],[CODIGO_FLUJO],[DOCUMENTO_UNICO],[FECHA_NAC_MOTORISTA],[FECHA_REGISTRO],[FECHA_VENC_DOC_MOTORISTA],[NOMBRES_MOTORISTA],[PAIS_DOCUMENTO],[SELECTIVIDAD],[TRA_PLA_NBR],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDGME_Update')
    PRINT '<<< CREATED TRIGGER dbo.RESTDGME_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTDGME_Update >>>'
go
CREATE TRIGGER [dbo].[RESTDUCAOUPUTLIST_Insert] 
ON [dbo].[RESTDUCAOUPUTLIST]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[RESTDUCAOUPUTLIST_Audit]
([persistenceId],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK1],[CUO_MRK2],[DOC_TYP],[DRV_IDE],[FECHA_REGISTRO],[GDS_CNT1],[GDS_CNT2],[GDS_WGT],[REF_YER],[REG_NBR],[REG_SER],[TLR_PLA_NBR],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK1],[CUO_MRK2],[DOC_TYP],[DRV_IDE],[FECHA_REGISTRO],[GDS_CNT1],[GDS_CNT2],[GDS_WGT],[REF_YER],[REG_NBR],[REG_SER],[TLR_PLA_NBR],[TRA_PLA_NBR],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCAOUPUTLIST_Insert')
    PRINT '<<< CREATED TRIGGER dbo.RESTDUCAOUPUTLIST_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTDUCAOUPUTLIST_Insert >>>'
go
CREATE TRIGGER [dbo].[RESTDUCAOUPUTLIST_Delete]    
ON [dbo].[RESTDUCAOUPUTLIST]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[RESTDUCAOUPUTLIST_Audit]
([persistenceId],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK1],[CUO_MRK2],[DOC_TYP],[DRV_IDE],[FECHA_REGISTRO],[GDS_CNT1],[GDS_CNT2],[GDS_WGT],[REF_YER],[REG_NBR],[REG_SER],[TLR_PLA_NBR],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK1],[CUO_MRK2],[DOC_TYP],[DRV_IDE],[FECHA_REGISTRO],[GDS_CNT1],[GDS_CNT2],[GDS_WGT],[REF_YER],[REG_NBR],[REG_SER],[TLR_PLA_NBR],[TRA_PLA_NBR],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCAOUPUTLIST_Delete')
    PRINT '<<< CREATED TRIGGER dbo.RESTDUCAOUPUTLIST_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTDUCAOUPUTLIST_Delete >>>'
go
CREATE TRIGGER [dbo].[RESTDUCAOUPUTLIST_Update]      
ON [dbo].[RESTDUCAOUPUTLIST]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_CASO]) THEN '[CODIGO_CASO]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_FLUJO]) THEN '[CODIGO_FLUJO]-' ELSE '' END + 
CASE WHEN UPDATE([CUO_COD]) THEN '[CUO_COD]-' ELSE '' END + 
CASE WHEN UPDATE([CUO_MRK1]) THEN '[CUO_MRK1]-' ELSE '' END + 
CASE WHEN UPDATE([CUO_MRK2]) THEN '[CUO_MRK2]-' ELSE '' END + 
CASE WHEN UPDATE([DOC_TYP]) THEN '[DOC_TYP]-' ELSE '' END + 
CASE WHEN UPDATE([DRV_IDE]) THEN '[DRV_IDE]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_REGISTRO]) THEN '[FECHA_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([GDS_CNT1]) THEN '[GDS_CNT1]-' ELSE '' END + 
CASE WHEN UPDATE([GDS_CNT2]) THEN '[GDS_CNT2]-' ELSE '' END + 
CASE WHEN UPDATE([GDS_WGT]) THEN '[GDS_WGT]-' ELSE '' END + 
CASE WHEN UPDATE([REF_YER]) THEN '[REF_YER]-' ELSE '' END + 
CASE WHEN UPDATE([REG_NBR]) THEN '[REG_NBR]-' ELSE '' END + 
CASE WHEN UPDATE([REG_SER]) THEN '[REG_SER]-' ELSE '' END + 
CASE WHEN UPDATE([TLR_PLA_NBR]) THEN '[TLR_PLA_NBR]-' ELSE '' END + 
CASE WHEN UPDATE([TRA_PLA_NBR]) THEN '[TRA_PLA_NBR]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[RESTDUCAOUPUTLIST_Audit]
([persistenceId],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK1],[CUO_MRK2],[DOC_TYP],[DRV_IDE],[FECHA_REGISTRO],[GDS_CNT1],[GDS_CNT2],[GDS_WGT],[REF_YER],[REG_NBR],[REG_SER],[TLR_PLA_NBR],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK1],[CUO_MRK2],[DOC_TYP],[DRV_IDE],[FECHA_REGISTRO],[GDS_CNT1],[GDS_CNT2],[GDS_WGT],[REF_YER],[REG_NBR],[REG_SER],[TLR_PLA_NBR],[TRA_PLA_NBR],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[RESTDUCAOUPUTLIST_Audit]
([persistenceId],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK1],[CUO_MRK2],[DOC_TYP],[DRV_IDE],[FECHA_REGISTRO],[GDS_CNT1],[GDS_CNT2],[GDS_WGT],[REF_YER],[REG_NBR],[REG_SER],[TLR_PLA_NBR],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK1],[CUO_MRK2],[DOC_TYP],[DRV_IDE],[FECHA_REGISTRO],[GDS_CNT1],[GDS_CNT2],[GDS_WGT],[REF_YER],[REG_NBR],[REG_SER],[TLR_PLA_NBR],[TRA_PLA_NBR],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCAOUPUTLIST_Update')
    PRINT '<<< CREATED TRIGGER dbo.RESTDUCAOUPUTLIST_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTDUCAOUPUTLIST_Update >>>'
go
CREATE TRIGGER [dbo].[RESTDUCASCONSULTAR_Insert] 
ON [dbo].[RESTDUCASCONSULTAR]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[RESTDUCASCONSULTAR_Audit]
([persistenceId],[BUS_TYP],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[GDS_CNT],[OPE_NAM],[PLT_NBR],[REF_YER],[REG_NBR],[REG_SER],[RES_DSC],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BUS_TYP],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[GDS_CNT],[OPE_NAM],[PLT_NBR],[REF_YER],[REG_NBR],[REG_SER],[RES_DSC],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCASCONSULTAR_Insert')
    PRINT '<<< CREATED TRIGGER dbo.RESTDUCASCONSULTAR_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTDUCASCONSULTAR_Insert >>>'
go
CREATE TRIGGER [dbo].[RESTDUCASCONSULTAR_Delete]    
ON [dbo].[RESTDUCASCONSULTAR]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[RESTDUCASCONSULTAR_Audit]
([persistenceId],[BUS_TYP],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[GDS_CNT],[OPE_NAM],[PLT_NBR],[REF_YER],[REG_NBR],[REG_SER],[RES_DSC],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BUS_TYP],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[GDS_CNT],[OPE_NAM],[PLT_NBR],[REF_YER],[REG_NBR],[REG_SER],[RES_DSC],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCASCONSULTAR_Delete')
    PRINT '<<< CREATED TRIGGER dbo.RESTDUCASCONSULTAR_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTDUCASCONSULTAR_Delete >>>'
go
CREATE TRIGGER [dbo].[RESTDUCASCONSULTAR_Update]      
ON [dbo].[RESTDUCASCONSULTAR]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([BUS_TYP]) THEN '[BUS_TYP]-' ELSE '' END + 
CASE WHEN UPDATE([CHK_PNT]) THEN '[CHK_PNT]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_CASO]) THEN '[CODIGO_CASO]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_FLUJO]) THEN '[CODIGO_FLUJO]-' ELSE '' END + 
CASE WHEN UPDATE([CUO_COD]) THEN '[CUO_COD]-' ELSE '' END + 
CASE WHEN UPDATE([CUO_MRK]) THEN '[CUO_MRK]-' ELSE '' END + 
CASE WHEN UPDATE([DOC_TYP]) THEN '[DOC_TYP]-' ELSE '' END + 
CASE WHEN UPDATE([DST_DSC]) THEN '[DST_DSC]-' ELSE '' END + 
CASE WHEN UPDATE([DST_TYP]) THEN '[DST_TYP]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_REGISTRO]) THEN '[FECHA_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([GDS_CNT]) THEN '[GDS_CNT]-' ELSE '' END + 
CASE WHEN UPDATE([OPE_NAM]) THEN '[OPE_NAM]-' ELSE '' END + 
CASE WHEN UPDATE([PLT_NBR]) THEN '[PLT_NBR]-' ELSE '' END + 
CASE WHEN UPDATE([REF_YER]) THEN '[REF_YER]-' ELSE '' END + 
CASE WHEN UPDATE([REG_NBR]) THEN '[REG_NBR]-' ELSE '' END + 
CASE WHEN UPDATE([REG_SER]) THEN '[REG_SER]-' ELSE '' END + 
CASE WHEN UPDATE([RES_DSC]) THEN '[RES_DSC]-' ELSE '' END + 
CASE WHEN UPDATE([SCG_IDE]) THEN '[SCG_IDE]-' ELSE '' END + 
CASE WHEN UPDATE([TRA_PLA_NBR]) THEN '[TRA_PLA_NBR]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[RESTDUCASCONSULTAR_Audit]
([persistenceId],[BUS_TYP],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[GDS_CNT],[OPE_NAM],[PLT_NBR],[REF_YER],[REG_NBR],[REG_SER],[RES_DSC],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BUS_TYP],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[GDS_CNT],[OPE_NAM],[PLT_NBR],[REF_YER],[REG_NBR],[REG_SER],[RES_DSC],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[RESTDUCASCONSULTAR_Audit]
([persistenceId],[BUS_TYP],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[GDS_CNT],[OPE_NAM],[PLT_NBR],[REF_YER],[REG_NBR],[REG_SER],[RES_DSC],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BUS_TYP],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[CUO_MRK],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[GDS_CNT],[OPE_NAM],[PLT_NBR],[REF_YER],[REG_NBR],[REG_SER],[RES_DSC],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTDUCASCONSULTAR_Update')
    PRINT '<<< CREATED TRIGGER dbo.RESTDUCASCONSULTAR_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTDUCASCONSULTAR_Update >>>'
go
CREATE TRIGGER [dbo].[RESTPROCESSEDDUCALIST_Insert] 
ON [dbo].[RESTPROCESSEDDUCALIST]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[RESTPROCESSEDDUCALIST_Audit]
([persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[OPE_NAM],[REF_YER],[REG_NBR],[REG_SER],[RES_COD],[RES_DSC],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[OPE_NAM],[REF_YER],[REG_NBR],[REG_SER],[RES_COD],[RES_DSC],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTPROCESSEDDUCALIST_Insert')
    PRINT '<<< CREATED TRIGGER dbo.RESTPROCESSEDDUCALIST_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTPROCESSEDDUCALIST_Insert >>>'
go
CREATE TRIGGER [dbo].[RESTPROCESSEDDUCALIST_Delete]    
ON [dbo].[RESTPROCESSEDDUCALIST]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[RESTPROCESSEDDUCALIST_Audit]
([persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[OPE_NAM],[REF_YER],[REG_NBR],[REG_SER],[RES_COD],[RES_DSC],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[OPE_NAM],[REF_YER],[REG_NBR],[REG_SER],[RES_COD],[RES_DSC],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTPROCESSEDDUCALIST_Delete')
    PRINT '<<< CREATED TRIGGER dbo.RESTPROCESSEDDUCALIST_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTPROCESSEDDUCALIST_Delete >>>'
go
CREATE TRIGGER [dbo].[RESTPROCESSEDDUCALIST_Update]      
ON [dbo].[RESTPROCESSEDDUCALIST]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([BUS_TYP]) THEN '[BUS_TYP]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_CASO]) THEN '[CODIGO_CASO]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_FLUJO]) THEN '[CODIGO_FLUJO]-' ELSE '' END + 
CASE WHEN UPDATE([CUO_COD]) THEN '[CUO_COD]-' ELSE '' END + 
CASE WHEN UPDATE([DOC_TYP]) THEN '[DOC_TYP]-' ELSE '' END + 
CASE WHEN UPDATE([DST_DSC]) THEN '[DST_DSC]-' ELSE '' END + 
CASE WHEN UPDATE([DST_TYP]) THEN '[DST_TYP]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_REGISTRO]) THEN '[FECHA_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([OPE_NAM]) THEN '[OPE_NAM]-' ELSE '' END + 
CASE WHEN UPDATE([REF_YER]) THEN '[REF_YER]-' ELSE '' END + 
CASE WHEN UPDATE([REG_NBR]) THEN '[REG_NBR]-' ELSE '' END + 
CASE WHEN UPDATE([REG_SER]) THEN '[REG_SER]-' ELSE '' END + 
CASE WHEN UPDATE([RES_COD]) THEN '[RES_COD]-' ELSE '' END + 
CASE WHEN UPDATE([RES_DSC]) THEN '[RES_DSC]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[RESTPROCESSEDDUCALIST_Audit]
([persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[OPE_NAM],[REF_YER],[REG_NBR],[REG_SER],[RES_COD],[RES_DSC],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[OPE_NAM],[REF_YER],[REG_NBR],[REG_SER],[RES_COD],[RES_DSC],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[RESTPROCESSEDDUCALIST_Audit]
([persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[OPE_NAM],[REF_YER],[REG_NBR],[REG_SER],[RES_COD],[RES_DSC],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[DOC_TYP],[DST_DSC],[DST_TYP],[FECHA_REGISTRO],[OPE_NAM],[REF_YER],[REG_NBR],[REG_SER],[RES_COD],[RES_DSC],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTPROCESSEDDUCALIST_Update')
    PRINT '<<< CREATED TRIGGER dbo.RESTPROCESSEDDUCALIST_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTPROCESSEDDUCALIST_Update >>>'
go
CREATE TRIGGER [dbo].[RESTSCGOUTPUT_Insert] 
ON [dbo].[RESTSCGOUTPUT]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[RESTSCGOUTPUT_Audit]
([persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[DST_DSC],[DST_TYP],[ERR_DSC],[FECHA_REGISTRO],[STA],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[DST_DSC],[DST_TYP],[ERR_DSC],[FECHA_REGISTRO],[STA],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTSCGOUTPUT_Insert')
    PRINT '<<< CREATED TRIGGER dbo.RESTSCGOUTPUT_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTSCGOUTPUT_Insert >>>'
go
CREATE TRIGGER [dbo].[RESTSCGOUTPUT_Delete]    
ON [dbo].[RESTSCGOUTPUT]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[RESTSCGOUTPUT_Audit]
([persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[DST_DSC],[DST_TYP],[ERR_DSC],[FECHA_REGISTRO],[STA],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[DST_DSC],[DST_TYP],[ERR_DSC],[FECHA_REGISTRO],[STA],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTSCGOUTPUT_Delete')
    PRINT '<<< CREATED TRIGGER dbo.RESTSCGOUTPUT_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTSCGOUTPUT_Delete >>>'
go
CREATE TRIGGER [dbo].[RESTSCGOUTPUT_Update]      
ON [dbo].[RESTSCGOUTPUT]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([BUS_TYP]) THEN '[BUS_TYP]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_CASO]) THEN '[CODIGO_CASO]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_FLUJO]) THEN '[CODIGO_FLUJO]-' ELSE '' END + 
CASE WHEN UPDATE([DST_DSC]) THEN '[DST_DSC]-' ELSE '' END + 
CASE WHEN UPDATE([DST_TYP]) THEN '[DST_TYP]-' ELSE '' END + 
CASE WHEN UPDATE([ERR_DSC]) THEN '[ERR_DSC]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_REGISTRO]) THEN '[FECHA_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([STA]) THEN '[STA]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[RESTSCGOUTPUT_Audit]
([persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[DST_DSC],[DST_TYP],[ERR_DSC],[FECHA_REGISTRO],[STA],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[DST_DSC],[DST_TYP],[ERR_DSC],[FECHA_REGISTRO],[STA],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[RESTSCGOUTPUT_Audit]
([persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[DST_DSC],[DST_TYP],[ERR_DSC],[FECHA_REGISTRO],[STA],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BUS_TYP],[CODIGO_CASO],[CODIGO_FLUJO],[DST_DSC],[DST_TYP],[ERR_DSC],[FECHA_REGISTRO],[STA],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTSCGOUTPUT_Update')
    PRINT '<<< CREATED TRIGGER dbo.RESTSCGOUTPUT_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTSCGOUTPUT_Update >>>'
go
CREATE TRIGGER [dbo].[RESTTRANSPORTMEDIAINFO_Insert] 
ON [dbo].[RESTTRANSPORTMEDIAINFO]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[RESTTRANSPORTMEDIAINFO_Audit]
([persistenceId],[BDR_CTY],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[FECHA_REGISTRO],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BDR_CTY],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[FECHA_REGISTRO],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTTRANSPORTMEDIAINFO_Insert')
    PRINT '<<< CREATED TRIGGER dbo.RESTTRANSPORTMEDIAINFO_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTTRANSPORTMEDIAINFO_Insert >>>'
go
CREATE TRIGGER [dbo].[RESTTRANSPORTMEDIAINFO_Delete]    
ON [dbo].[RESTTRANSPORTMEDIAINFO]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[RESTTRANSPORTMEDIAINFO_Audit]
([persistenceId],[BDR_CTY],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[FECHA_REGISTRO],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BDR_CTY],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[FECHA_REGISTRO],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTTRANSPORTMEDIAINFO_Delete')
    PRINT '<<< CREATED TRIGGER dbo.RESTTRANSPORTMEDIAINFO_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTTRANSPORTMEDIAINFO_Delete >>>'
go
CREATE TRIGGER [dbo].[RESTTRANSPORTMEDIAINFO_Update]      
ON [dbo].[RESTTRANSPORTMEDIAINFO]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([BDR_CTY]) THEN '[BDR_CTY]-' ELSE '' END + 
CASE WHEN UPDATE([CHK_PNT]) THEN '[CHK_PNT]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_CASO]) THEN '[CODIGO_CASO]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_FLUJO]) THEN '[CODIGO_FLUJO]-' ELSE '' END + 
CASE WHEN UPDATE([CUO_COD]) THEN '[CUO_COD]-' ELSE '' END + 
CASE WHEN UPDATE([FECHA_REGISTRO]) THEN '[FECHA_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([SCG_IDE]) THEN '[SCG_IDE]-' ELSE '' END + 
CASE WHEN UPDATE([TRA_PLA_NBR]) THEN '[TRA_PLA_NBR]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[RESTTRANSPORTMEDIAINFO_Audit]
([persistenceId],[BDR_CTY],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[FECHA_REGISTRO],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BDR_CTY],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[FECHA_REGISTRO],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[RESTTRANSPORTMEDIAINFO_Audit]
([persistenceId],[BDR_CTY],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[FECHA_REGISTRO],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[BDR_CTY],[CHK_PNT],[CODIGO_CASO],[CODIGO_FLUJO],[CUO_COD],[FECHA_REGISTRO],[SCG_IDE],[TRA_PLA_NBR],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='RESTTRANSPORTMEDIAINFO_Update')
    PRINT '<<< CREATED TRIGGER dbo.RESTTRANSPORTMEDIAINFO_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.RESTTRANSPORTMEDIAINFO_Update >>>'
go
CREATE TRIGGER [dbo].[TIPODOCDGA_Insert] 
ON [dbo].[TIPODOCDGA]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[TIPODOCDGA_Audit]
([persistenceId],[CODIGO_DOCUMENTO],[ENVIO_A_DGA],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_DOCUMENTO],[ENVIO_A_DGA],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCDGA_Insert')
    PRINT '<<< CREATED TRIGGER dbo.TIPODOCDGA_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.TIPODOCDGA_Insert >>>'
go
CREATE TRIGGER [dbo].[TIPODOCDGA_Delete]    
ON [dbo].[TIPODOCDGA]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[TIPODOCDGA_Audit]
([persistenceId],[CODIGO_DOCUMENTO],[ENVIO_A_DGA],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_DOCUMENTO],[ENVIO_A_DGA],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCDGA_Delete')
    PRINT '<<< CREATED TRIGGER dbo.TIPODOCDGA_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.TIPODOCDGA_Delete >>>'
go
CREATE TRIGGER [dbo].[TIPODOCDGA_Update]      
ON [dbo].[TIPODOCDGA]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_DOCUMENTO]) THEN '[CODIGO_DOCUMENTO]-' ELSE '' END + 
CASE WHEN UPDATE([ENVIO_A_DGA]) THEN '[ENVIO_A_DGA]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_REGISTRO]) THEN '[ESTADO_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([NOMBRE_DOCUMENTO]) THEN '[NOMBRE_DOCUMENTO]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[TIPODOCDGA_Audit]
([persistenceId],[CODIGO_DOCUMENTO],[ENVIO_A_DGA],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_DOCUMENTO],[ENVIO_A_DGA],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[TIPODOCDGA_Audit]
([persistenceId],[CODIGO_DOCUMENTO],[ENVIO_A_DGA],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_DOCUMENTO],[ENVIO_A_DGA],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCDGA_Update')
    PRINT '<<< CREATED TRIGGER dbo.TIPODOCDGA_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.TIPODOCDGA_Update >>>'
go
CREATE TRIGGER [dbo].[TIPODOCUMENTODGA_Insert] 
ON [dbo].[TIPODOCUMENTODGA]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[TIPODOCUMENTODGA_Audit]
([persistenceId],[CODIGO_DOCUMENTO],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_DOCUMENTO],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCUMENTODGA_Insert')
    PRINT '<<< CREATED TRIGGER dbo.TIPODOCUMENTODGA_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.TIPODOCUMENTODGA_Insert >>>'
go
CREATE TRIGGER [dbo].[TIPODOCUMENTODGA_Delete]    
ON [dbo].[TIPODOCUMENTODGA]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[TIPODOCUMENTODGA_Audit]
([persistenceId],[CODIGO_DOCUMENTO],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_DOCUMENTO],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCUMENTODGA_Delete')
    PRINT '<<< CREATED TRIGGER dbo.TIPODOCUMENTODGA_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.TIPODOCUMENTODGA_Delete >>>'
go
CREATE TRIGGER [dbo].[TIPODOCUMENTODGA_Update]      
ON [dbo].[TIPODOCUMENTODGA]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_DOCUMENTO]) THEN '[CODIGO_DOCUMENTO]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_REGISTRO]) THEN '[ESTADO_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([NOMBRE_DOCUMENTO]) THEN '[NOMBRE_DOCUMENTO]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[TIPODOCUMENTODGA_Audit]
([persistenceId],[CODIGO_DOCUMENTO],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_DOCUMENTO],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[TIPODOCUMENTODGA_Audit]
([persistenceId],[CODIGO_DOCUMENTO],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_DOCUMENTO],[ESTADO_REGISTRO],[NOMBRE_DOCUMENTO],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPODOCUMENTODGA_Update')
    PRINT '<<< CREATED TRIGGER dbo.TIPODOCUMENTODGA_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.TIPODOCUMENTODGA_Update >>>'
go
CREATE TRIGGER [dbo].[TIPOMEDIOTRANSPORTE_Insert] 
ON [dbo].[TIPOMEDIOTRANSPORTE]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[TIPOMEDIOTRANSPORTE_Audit]
([persistenceId],[CODIGO_TIPO_MT],[ESTADO_REGISTRO],[NOMBRE_TIPO_MT],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_TIPO_MT],[ESTADO_REGISTRO],[NOMBRE_TIPO_MT],[persistenceVersion],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMEDIOTRANSPORTE_Insert')
    PRINT '<<< CREATED TRIGGER dbo.TIPOMEDIOTRANSPORTE_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.TIPOMEDIOTRANSPORTE_Insert >>>'
go
CREATE TRIGGER [dbo].[TIPOMEDIOTRANSPORTE_Delete]    
ON [dbo].[TIPOMEDIOTRANSPORTE]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[TIPOMEDIOTRANSPORTE_Audit]
([persistenceId],[CODIGO_TIPO_MT],[ESTADO_REGISTRO],[NOMBRE_TIPO_MT],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_TIPO_MT],[ESTADO_REGISTRO],[NOMBRE_TIPO_MT],[persistenceVersion],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMEDIOTRANSPORTE_Delete')
    PRINT '<<< CREATED TRIGGER dbo.TIPOMEDIOTRANSPORTE_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.TIPOMEDIOTRANSPORTE_Delete >>>'
go
CREATE TRIGGER [dbo].[TIPOMEDIOTRANSPORTE_Update]      
ON [dbo].[TIPOMEDIOTRANSPORTE]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_TIPO_MT]) THEN '[CODIGO_TIPO_MT]-' ELSE '' END + 
CASE WHEN UPDATE([ESTADO_REGISTRO]) THEN '[ESTADO_REGISTRO]-' ELSE '' END + 
CASE WHEN UPDATE([NOMBRE_TIPO_MT]) THEN '[NOMBRE_TIPO_MT]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[TIPOMEDIOTRANSPORTE_Audit]
([persistenceId],[CODIGO_TIPO_MT],[ESTADO_REGISTRO],[NOMBRE_TIPO_MT],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_TIPO_MT],[ESTADO_REGISTRO],[NOMBRE_TIPO_MT],[persistenceVersion],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[TIPOMEDIOTRANSPORTE_Audit]
([persistenceId],[CODIGO_TIPO_MT],[ESTADO_REGISTRO],[NOMBRE_TIPO_MT],[persistenceVersion],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGO_TIPO_MT],[ESTADO_REGISTRO],[NOMBRE_TIPO_MT],[persistenceVersion],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMEDIOTRANSPORTE_Update')
    PRINT '<<< CREATED TRIGGER dbo.TIPOMEDIOTRANSPORTE_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.TIPOMEDIOTRANSPORTE_Update >>>'
go
CREATE TRIGGER [dbo].[TIPOMT_Insert] 
ON [dbo].[TIPOMT]    
FOR INSERT    
AS    

 INSERT INTO [dbo].[TIPOMT_Audit]
([persistenceId],[CODIGOTIPOMT],[NOMBRETIPOMT],[persistenceVersion],[CODIGO_TIPO_MT],[NOMBRE_TIPO_MT],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGOTIPOMT],[NOMBRETIPOMT],[persistenceVersion],[CODIGO_TIPO_MT],[NOMBRE_TIPO_MT],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMT_Insert')
    PRINT '<<< CREATED TRIGGER dbo.TIPOMT_Insert >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.TIPOMT_Insert >>>'
go
CREATE TRIGGER [dbo].[TIPOMT_Delete]    
ON [dbo].[TIPOMT]    
FOR DELETE    
AS   
  INSERT INTO [dbo].[TIPOMT_Audit]
([persistenceId],[CODIGOTIPOMT],[NOMBRETIPOMT],[persistenceVersion],[CODIGO_TIPO_MT],[NOMBRE_TIPO_MT],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGOTIPOMT],[NOMBRETIPOMT],[persistenceVersion],[CODIGO_TIPO_MT],[NOMBRE_TIPO_MT],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMT_Delete')
    PRINT '<<< CREATED TRIGGER dbo.TIPOMT_Delete >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.TIPOMT_Delete >>>'
go
CREATE TRIGGER [dbo].[TIPOMT_Update]      
ON [dbo].[TIPOMT]    
FOR UPDATE    
AS 
   
 
    DECLARE @UpdatedCols varchar(max) 
 
   SELECT @UpdatedCols =  CASE WHEN UPDATE([persistenceId]) THEN '[persistenceId]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGOTIPOMT]) THEN '[CODIGOTIPOMT]-' ELSE '' END + 
CASE WHEN UPDATE([NOMBRETIPOMT]) THEN '[NOMBRETIPOMT]-' ELSE '' END + 
CASE WHEN UPDATE([persistenceVersion]) THEN '[persistenceVersion]-' ELSE '' END + 
CASE WHEN UPDATE([CODIGO_TIPO_MT]) THEN '[CODIGO_TIPO_MT]-' ELSE '' END + 
CASE WHEN UPDATE([NOMBRE_TIPO_MT]) THEN '[NOMBRE_TIPO_MT]-' ELSE '' END  
    
   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
   BEGIN 
          INSERT INTO [dbo].[TIPOMT_Audit]
([persistenceId],[CODIGOTIPOMT],[NOMBRETIPOMT],[persistenceVersion],[CODIGO_TIPO_MT],[NOMBRE_TIPO_MT],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGOTIPOMT],[NOMBRETIPOMT],[persistenceVersion],[CODIGO_TIPO_MT],[NOMBRE_TIPO_MT],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
    
          INSERT INTO [dbo].[TIPOMT_Audit]
([persistenceId],[CODIGOTIPOMT],[NOMBRETIPOMT],[persistenceVersion],[CODIGO_TIPO_MT],[NOMBRE_TIPO_MT],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[persistenceId]) as [persistenceId],[CODIGOTIPOMT],[NOMBRETIPOMT],[persistenceVersion],[CODIGO_TIPO_MT],[NOMBRE_TIPO_MT],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
   END
go
IF EXISTS (SELECT * FROM sys.triggers WHERE name='TIPOMT_Update')
    PRINT '<<< CREATED TRIGGER dbo.TIPOMT_Update >>>'
ELSE
    PRINT '<<< FAILED CREATING TRIGGER dbo.TIPOMT_Update >>>'
go
